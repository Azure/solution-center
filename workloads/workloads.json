[
    {
        "title": "ChatGPT + Enterprise data with Azure OpenAI and AI Search",
        "description": "A sample app for the Retrieval-Augmented Generation pattern running in Azure, using Azure AI Search for retrieval and Azure OpenAI large language models to power ChatGPT-style and Q&A experiences.",
        "author": "Microsoft",
        "source": "https://github.com/Azure-Samples/azure-search-openai-demo",
        "tags": [
            "OpenAI",
            "Azure",
            "AI Search",
            "ChatGPT",
            "Enterprise"
        ],
        "id": "88bce5a4-8e70-4c83-a87c-4d68e34eaf7e",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure OpenAI",
            "Azure Cognitive Search",
            "Azure App Service",
            "Azure Blob Storage",
            "Azure Monitor"
        ],
        "sampleQueries": [
            "How do I set up a Retrieval-Augmented Generation pattern with Azure?",
            "What is required to run a sample app that combines Azure AI Search with ChatGPT?",
            "Where can I find examples of enterprise-level implementations of Azure OpenAI and AI Search?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Python"
        ],
        "keyFeatures": [
            "Chat (multi-turn) and Q&A (single turn) interfaces",
            "Renders citations and thought process for each answer",
            "Includes settings directly in the UI to tweak the behavior and experiment with options",
            "Integrates Azure AI Search for indexing and retrieval of documents",
            "Supports many document formats as well as integrated vectorization",
            "Optional usage of GPT-4 with vision to reason over image-heavy documents",
            "Optional addition of speech input/output for accessibility",
            "Optional automation of user login and data access via Microsoft Entra",
            "Performance tracing and monitoring with Application Insights"
        ]
    },
    {
        "title": "Starter - Bicep",
        "description": "A starter template with Bicep as infrastructure provider",
        "author": "Azure Dev",
        "source": "https://github.com/Azure-Samples/azd-starter-bicep",
        "tags": [
            "bicep",
            "msft"
        ],
        "id": "6772728c-49cd-48c5-99fb-2f1435b2a62f",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Developer CLI",
            "Azure Key Vault",
            "Azure App Service",
            "Azure Functions",
            "Azure Kubernetes Service",
            "Azure Active Directory"
        ],
        "sampleQueries": [
            "How do I get started with a Bicep template for my infrastructure on Azure?",
            "Where can I find a starter template using Bicep as an infrastructure provider for Azure?",
            "Can I use the Starter - Bicep template from a GitHub repository to deploy Azure infrastructure?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep"
        ],
        "keyFeatures": [
            "Infrastructure-as-code Bicep files for resource provisioning and resource tagging",
            "Dev container configuration for creating cloud-hosted developer environments",
            "Continuous deployment workflows for CI providers such as GitHub Actions and Azure Pipelines",
            "Instructions to add application code and validate with azd package",
            "Guidance on provisioning Azure resources using Bicep files",
            "Steps to tie application and infrastructure together, including application settings, managed identities, and Azure Key Vault",
            "Command usage details for validating and deploying changes with azd",
            "Clear steps to get application running on Azure"
        ]
    },
    {
        "title": "Starter - Terraform",
        "description": "A starter template with Terraform as infrastructure provider",
        "author": "Azure Dev",
        "source": "https://github.com/Azure-Samples/azd-starter-terraform",
        "tags": [
            "terraform",
            "msft"
        ],
        "id": "550708e7-b74e-448d-9de8-b60eb57e8208",
        "deploymentOptions": [
            "azcli",
            "terraform"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Developer CLI",
            "Azure Functions",
            "Azure App Service",
            "Azure Key Vault",
            "Azure Kubernetes Service"
        ],
        "sampleQueries": [
            "How to create infrastructure using the Terraform starter template on Azure?",
            "Can I deploy my infrastructure on Azure using the Starter - Terraform template?",
            "What is the Starter - Terraform template for Azure and how do I use it?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Terraform"
        ],
        "keyFeatures": [
            "Infrastructure-as-code (IaC) Terraform modules under the 'infra' directory",
            "Dev container configuration file under the '.devcontainer' directory",
            "Continuous deployment workflows for CI providers such as GitHub Actions and Azure Pipelines",
            "Integration with Azure Developer CLI (azd)",
            "Guidance for adding application code and updating 'azure.yaml'",
            "Provisioning of Azure resources using Terraform modules",
            "Application settings configuration for Azure services",
            "Managed identities for securing communication between services",
            "Azure Key Vault for storing secrets securely",
            "Host configuration options for services like 'appservice' and 'aks'"
        ]
    },
    {
        "title": "WordPress with Azure Container Apps",
        "description": "A blueprint to easily and quickly create and deploy your first scalable and secure WordPress site to Azure, leveraging Azure Container Apps with Azure Database for MariaDb.",
        "author": "Konstantinos Pantos",
        "source": "https://github.com/Azure-Samples/apptemplate-wordpress-on-ACA",
        "tags": [
            "php",
            "javascript",
            "aca",
            "agw",
            "rediscache",
            "monitor",
            "keyvault",
            "bicep",
            "msft"
        ],
        "id": "bdc334e1-d0da-4401-b3a0-ac1b6a03f2d9",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Container Apps",
            "Azure Application Gateway",
            "Azure Key Vault",
            "Azure Monitor",
            "Azure Cache for Redis"
        ],
        "sampleQueries": [
            "How can I deploy WordPress using Azure Container Apps?",
            "What is the best way to secure a WordPress site on Azure?",
            "Can Azure Database for MariaDb be integrated with a scalable WordPress application on Azure?"
        ],
        "sourceType": "Azd",
        "tech": [
            "PHP",
            "JavaScript",
            "Bicep"
        ],
        "keyFeatures": [
            "Scalable WordPress deployment",
            "Secure WordPress site",
            "Uses Azure Container Apps",
            "Leverages Azure Database for MariaDB",
            "Single-click deployment with Bicep and GitHub Actions",
            "High performance object cache with Redis Cache",
            "Secret management with Azure Key Vault",
            "Traffic management with Azure Application Gateway",
            "Secure networking with Azure Networking",
            "Persistent state with Azure Storage",
            "Application monitoring with Azure Log Analytics and Application Insights",
            "Supports Azure Developer CLI",
            "CI/CD automation via GitHub Actions",
            "Potential extensions with Azure FrontDoor and Azure Container registry",
            "Supports blue/green deployment"
        ]
    },
    {
        "title": "React Web App with C# API and MongoDB",
        "description": "A blueprint for getting a React web app with a C# API and a MongoDB database on Azure. The blueprint includes sample application code (a ToDo web app) which can be removed and replaced with your own application code. Add your own source code and leverage the Infrastructure as Code assets (written in Bicep) to get up and running quickly.",
        "author": "Azure Dev",
        "source": "https://github.com/Azure-Samples/todo-csharp-cosmos-sql",
        "tags": [
            "dotnetCsharp",
            "typescript",
            "javascript",
            "appservice",
            "cosmosdb",
            "mongodb",
            "monitor",
            "keyvault",
            "reactjs",
            "bicep",
            "msft"
        ],
        "id": "a8b10a54-9384-4fed-b59b-c71ed95c131c",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure App Service",
            "Azure Cosmos DB",
            "Azure Monitor",
            "Azure Key Vault"
        ],
        "sampleQueries": [
            "How do I set up a React web app with a C# API and MongoDB on Azure?"
        ],
        "sourceType": "Azd",
        "tech": [
            "C#",
            "Bicep",
            "Typescript",
            "HTML",
            "Javascript",
            "Reactjs",
            "CosmosDB"
        ],
        "keyFeatures": [
            "React web app with C# API",
            "MongoDB database",
            "Sample application code (ToDo web app)",
            "Infrastructure as Code assets (Bicep)",
            "Azure App Services",
            "Azure Cosmos DB for NoSQL",
            "Azure Monitor",
            "Azure Key Vault",
            "Uses Azure Developer CLI (azd)",
            "Provision and deploy to Azure",
            "Configure CI/CD pipeline",
            "Monitor application with Azure Monitor",
            "Run and debug locally with Visual Studio Code",
            "Managed identity in Azure AD",
            "Securely store secrets with Azure Key Vault"
        ]
    },
    {
        "title": "React Web App with Node.js API and MongoDB",
        "description": "A blueprint for getting a React web app with a Node.js API and a MongoDB database on Azure. The blueprint includes sample application code (a ToDo web app) which can be removed and replaced with your own application code. Add your own source code and leverage the Infrastructure as Code assets (written in Bicep) to get up and running quickly. This architecture is for hosting web apps and APIs without worrying about the infrastructure.",
        "author": "Azure Dev",
        "source": "https://github.com/Azure-Samples/todo-nodejs-mongo",
        "tags": [
            "bicep",
            "nodejs",
            "typescript",
            "javascript",
            "appservice",
            "cosmosdb",
            "monitor",
            "keyvault",
            "mongodb",
            "reactjs",
            "msft"
        ],
        "id": "12d2cfbe-830b-4b06-aa07-8ce09c372d77",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure App Service",
            "Azure Cosmos DB",
            "Azure Monitor",
            "Azure Key Vault"
        ],
        "sampleQueries": [
            "How can I deploy a React app with a Node.js backend and MongoDB on Azure?",
            "Is there a GitHub blueprint for setting up a full-stack web app with React, Node.js, and MongoDB in Azure?",
            "What Azure services should I use for hosting a React web application with a Node.js API?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "Nodejs",
            "Typescript",
            "Javascript",
            "Reactjs",
            "MongoDB"
        ],
        "keyFeatures": [
            "React web app with a Node.js API",
            "MongoDB database integration",
            "Sample application code (ToDo web app)",
            "Infrastructure as Code assets written in Bicep",
            "Hosted on Azure App Services",
            "Uses Azure Cosmos DB API for MongoDB",
            "Integration with Azure Monitor",
            "Secure secrets management with Azure Key Vault",
            "Azure Developer CLI support for building, deploying, and monitoring",
            "CI/CD pipeline setup with Azure DevOps or GitHub Actions",
            "Local testing and debugging via Visual Studio Code and Azure Developer CLI extension",
            "Provisioning and deployment automation with azd commands",
            "Managed identity for authentication with Azure AD",
            "Optional features like API Management (APIM)"
        ]
    },
    {
        "title": "Static React Web App + Functions with Node.js API and MongoDB",
        "description": "A blueprint for getting a React web app with a Node.js API and a MongoDB database on Azure. The blueprint includes sample application code (a ToDo web app) which can be removed and replaced with your own application code. Add your own source code and leverage the Infrastructure as Code assets (written in Bicep) to get up and running quickly. This architecture is for hosting static web apps with serverless logic and functionality.",
        "author": "Azure Dev",
        "source": "https://github.com/Azure-Samples/todo-nodejs-mongo-swa-func",
        "tags": [
            "bicep",
            "swa",
            "functions",
            "nodejs",
            "typescript",
            "javascript",
            "cosmosdb",
            "monitor",
            "keyvault",
            "mongodb",
            "reactjs",
            "appservice",
            "msft"
        ],
        "id": "efbd5a95-560b-409d-8b5c-407d5f15d0e9",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Static Web Apps",
            "Azure Functions",
            "Azure Cosmos DB",
            "Azure Monitor",
            "Azure Key Vault"
        ],
        "sampleQueries": [
            "How can I deploy a React web app with Node.js backend and MongoDB on Azure?",
            "What is the best way to use Azure Functions with a React and Node.js application?",
            "Can I find a blueprint for a Static Web App using React, Node.js, and Azure CosmosDB?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "Nodejs",
            "Typescript",
            "Javascript",
            "Reactjs",
            "MongoDB"
        ],
        "keyFeatures": [
            "React web app with Node.js API",
            "MongoDB database",
            "Azure Static Web Apps for hosting",
            "Azure Function Apps for serverless backend",
            "Azure Cosmos DB API for MongoDB for storage",
            "Azure Monitor for monitoring and logging",
            "Azure Key Vault for securing secrets",
            "Sample ToDo application code included",
            "Infrastructure as Code with Bicep",
            "Azure Developer CLI for build, deploy, and monitor",
            "Support for CI/CD pipeline configuration with GitHub Actions or Azure DevOps",
            "Local development support with Azure Functions Core Tools",
            "Deployment limited to specific Azure regions",
            "Commands for provisioning, deploying, and tearing down resources",
            "Optional features like APIM for enhanced backend protection and observability"
        ]
    },
    {
        "title": "Static React Web App + Functions with Python API and MongoDB",
        "description": "A blueprint for getting a React.js web app with Python (FastAPI) API and a MongoDB API in Cosmos database onto Azure. The frontend, currently a ToDo application, is designed as a placeholder that can easily be removed and replaced with your own frontend code. This architecture is for hosting static web apps with serverless logic and functionality.",
        "author": "Azure Dev",
        "source": "https://github.com/Azure-Samples/todo-python-mongo-swa-func",
        "tags": [
            "bicep",
            "swa",
            "functions",
            "python",
            "typescript",
            "javascript",
            "cosmosdb",
            "monitor",
            "keyvault",
            "mongodb",
            "reactjs",
            "appservice",
            "fastapi",
            "msft"
        ],
        "id": "9df1ed02-2102-415e-bf5d-dec8dd6787cb",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Static Web Apps",
            "Azure Functions",
            "Azure Cosmos DB",
            "Azure Monitor",
            "Azure Key Vault"
        ],
        "sampleQueries": [
            "How to deploy a React app with a Python FastAPI backend and MongoDB on Azure?",
            "What's the best way to integrate a MongoDB Cosmos database with a React and FastAPI project in Azure?",
            "Can I use Azure functions to add serverless capabilities to my React and FastAPI web application?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "Python",
            "Typescript",
            "Javascript",
            "Reactjs",
            "MongoDB",
            "FastAPI"
        ],
        "keyFeatures": [
            "Static React web application",
            "Python (FastAPI) API backend",
            "Azure Cosmos DB API for MongoDB for storage",
            "Azure Static Web Apps for hosting the frontend",
            "Azure Function Apps for hosting the backend API",
            "Azure Monitor for monitoring and logging",
            "Azure Key Vault for securing secrets",
            "Azure Developer CLI (azd) for build, deploy, and monitor",
            "CI/CD pipeline configuration using GitHub Actions or Azure DevOps",
            "Local debugging and testing using Visual Studio Code and Azure Developer CLI extension",
            "Provisioning and deploying resources using Bicep templates",
            "Serverless logic and functionality",
            "Integrated managed identity for Azure AD authentication"
        ]
    },
    {
        "title": "React Web App with Python API and MongoDB - Terraform",
        "description": "A blueprint for getting a React.js web app with Python (FastAPI) API and a MongoDB API in Cosmos database onto Azure. The blueprint includes sample application code (a ToDo web app) which can be removed and replaced with your own application code. Add your own source code and leverage the Infrastructure as Code assets (written in Terraform) to get up and running quickly. This architecture is for hosting web apps and APIs without worrying about the infrastructure.",
        "author": "Azure Dev",
        "source": "https://github.com/Azure-Samples/todo-python-mongo-terraform",
        "tags": [
            "python",
            "typescript",
            "javascript",
            "cosmosdb",
            "mongodb",
            "monitor",
            "keyvault",
            "reactjs",
            "terraform",
            "appservice",
            "fastapi",
            "msft"
        ],
        "id": "616b6d54-c34b-44dd-b2d3-6557daee156e",
        "deploymentOptions": [
            "azcli",
            "terraform"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure App Service",
            "Azure Cosmos DB",
            "Azure Monitor",
            "Azure Key Vault"
        ],
        "sampleQueries": [
            "How do I set up a React.js web app with a Python FastAPI backend and MongoDB on Azure?",
            "Can I use Terraform to deploy a full-stack application with React, Python API, and MongoDB in Cosmos DB?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Python",
            "Terraform",
            "Typescript",
            "JavaScript",
            "HTML",
            "FastAPI",
            "MongoDB",
            "Reactjs"
        ],
        "keyFeatures": [
            "React.js web app with Python (FastAPI) API",
            "MongoDB API in Cosmos database",
            "Sample ToDo web app code",
            "Replaceable application code",
            "Infrastructure as Code using Terraform",
            "Azure App Services for hosting",
            "Azure Cosmos DB API for MongoDB for storage",
            "Azure Monitor for monitoring and logging",
            "Azure Key Vault for securing secrets",
            "Utilizes Azure Developer CLI",
            "CI/CD pipeline configuration via azd pipeline config",
            "Monitoring via azd monitor",
            "Local debugging with Visual Studio Code and Azure Developer CLI extension",
            "azd commands for managing resources",
            "Managed identity for app authentication",
            "Secure storage using Azure Key Vault",
            "Support for enhanced backend API protection and observability via optional features",
            "Quick provisioning and deployment using azd up",
            "Resource grouping in a single Azure resource group"
        ]
    },
    {
        "title": "React Web App with Node.js API and MongoDB - Terraform",
        "description": "A blueprint for getting a React web app with a Node.js API and a MongoDB database on Azure. The blueprint includes sample application code (a ToDo web app) which can be removed and replaced with your own application code. Add your own source code and leverage the Infrastructure as Code assets (written in Terraform) to get up and running quickly. This architecture is for hosting web apps and APIs without worrying about the infrastructure.",
        "author": "Azure Dev",
        "source": "https://github.com/Azure-Samples/todo-nodejs-mongo-terraform",
        "tags": [
            "nodejs",
            "typescript",
            "javascript",
            "cosmosdb",
            "mongodb",
            "monitor",
            "keyvault",
            "reactjs",
            "terraform",
            "appservice",
            "msft"
        ],
        "id": "a1e493de-1f5b-4cc1-b9e1-18b07f073abe",
        "deploymentOptions": [
            "azcli",
            "terraform"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure App Service",
            "Azure Cosmos DB",
            "Azure Monitor",
            "Azure Key Vault"
        ],
        "sampleQueries": [
            "How can I deploy a React and Node.js application with MongoDB on Azure using Terraform?",
            "Is there a blueprint for setting up a React app with Node.js API and MongoDB on Azure?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Nodejs",
            "Typescript",
            "Javascript",
            "MongoDB",
            "Terraform",
            "Reactjs",
            "HTML"
        ],
        "keyFeatures": [
            "React web app with Node.js API",
            "MongoDB database",
            "Sample ToDo application code",
            "Azure hosting",
            "Infrastructure as Code with Terraform",
            "Quick start with Azure Developer CLI",
            "Azure App Services hosting",
            "Azure Cosmos DB for MongoDB",
            "Azure Monitor integration",
            "Azure Key Vault for securing secrets",
            "CI/CD pipeline setup with Azure Developer CLI",
            "Local development with Visual Studio Code",
            "Managed identity for authentication",
            "Secure storage with Azure Key Vault",
            "Comprehensive documentation and quickstart guide"
        ]
    },
    {
        "title": "React Web App with Python API and MongoDB",
        "description": "A blueprint for getting a React.js web app with Python (FastAPI) API and a MongoDB API in Cosmos database onto Azure. The blueprint includes sample application code (a ToDo web app) which can be removed and replaced with your own application code. Add your own source code and leverage the Infrastructure as Code assets (written in Bicep) to get up and running quickly. This architecture is for hosting web apps and APIs without worrying about the infrastructure.",
        "author": "Azure Dev",
        "source": "https://github.com/Azure-Samples/todo-python-mongo",
        "tags": [
            "bicep",
            "python",
            "typescript",
            "javascript",
            "appservice",
            "cosmosdb",
            "monitor",
            "keyvault",
            "mongodb",
            "reactjs",
            "fastapi",
            "msft"
        ],
        "id": "07b915d6-29cc-45ee-a973-c338de02310f",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure App Service",
            "Azure Cosmos DB",
            "Azure Monitor",
            "Azure Key Vault"
        ],
        "sampleQueries": [
            "How do I deploy a React web app with a Python FastAPI backend and MongoDB on Azure?",
            "Can I use AzD templates to quickly set up a React.js application with Python API and MongoDB Cosmos DB on Azure?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "Python",
            "Javascript",
            "Typescript",
            "HTML",
            "Reactjs",
            "MongoDB",
            "FastAPI"
        ],
        "keyFeatures": [
            "React.js web app",
            "Python (FastAPI) API",
            "MongoDB API in Cosmos database",
            "Sample ToDo web app code",
            "Replaceable application code",
            "Infrastructure as Code (Bicep)",
            "Hosted on Azure",
            "Azure App Services for Web frontend and API backend",
            "Azure Cosmos DB API for MongoDB for storage",
            "Azure Monitor for logging and monitoring",
            "Azure Key Vault for securing secrets",
            "Azure Developer CLI (azd) integration",
            "Quickstart guide and commands",
            "Managed identity for Azure AD authentication",
            "Secure storage of connection strings in Azure Key Vault",
            "CI/CD pipeline setup with GitHub Actions or Azure DevOps",
            "Local run and debug using Visual Studio Code",
            "Full removal of resources with 'azd down'"
        ]
    },
    {
        "title": "Containerized React Web App with Node.js API and MongoDB",
        "description": "A blueprint for getting a React web app with a Node.js API and a MongoDB database onto Azure. The blueprint includes sample application code (a ToDo web app) which can be removed and replaced with your own application code. Add your own source code and leverage the Infrastructure as Code assets (written in Bicep) to get up and running quickly. This architecture is for running containerized apps or microservices on a serverless platform   This architecture is for running containerized microservices without managing the servers.",
        "author": "Azure Dev",
        "source": "https://github.com/Azure-Samples/todo-nodejs-mongo-aca",
        "tags": [
            "bicep",
            "nodejs",
            "typescript",
            "javascript",
            "appservice",
            "cosmosdb",
            "monitor",
            "keyvault",
            "mongodb",
            "reactjs",
            "aca",
            "msft"
        ],
        "id": "3bdd6e9a-60f5-4189-9caa-b5859d2c33a4",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure App Service",
            "Azure Cosmos DB",
            "Azure Monitor",
            "Azure Key Vault",
            "Azure Container Apps"
        ],
        "sampleQueries": [
            "How can I deploy a containerized React and Node.js app with MongoDB on Azure?",
            "What resources does Azure provide for hosting microservices based on React, Node.js, and MongoDB?",
            "Is there a blueprint for setting up a React web application with Node.js API on Azure using MongoDB as the database?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "Node.js",
            "Typescript",
            "HTML",
            "Javascript",
            "React.js",
            "MongoDB",
            "Cosmos DB"
        ],
        "keyFeatures": [
            "React web app with Node.js API",
            "MongoDB database",
            "Sample application code (ToDo web app)",
            "Infrastructure as Code assets (Bicep)",
            "Containerized apps or microservices on serverless platform",
            "Azure Developer CLI for building, deploying, and monitoring",
            "Azure Container Apps for hosting frontend and backend",
            "Azure Cosmos DB API for MongoDB for storage",
            "Azure Monitor for monitoring and logging",
            "Azure Key Vault for securing secrets",
            "Support for Azure DevOps (azdo) CI/CD pipelines",
            "Ability to run and debug locally using Visual Studio Code",
            "Managed identity for Azure AD authentication",
            "Secure storage in Azure Key Vault"
        ]
    },
    {
        "title": "Containerized React Web App with Python API and MongoDB",
        "description": "A blueprint for getting a React.js web app with Python (FastAPI) API and a MongoDB API in Cosmos database onto Azure. The frontend, currently a ToDo application, is designed as a placeholder that can easily be removed and replaced with your own frontend code. This architecture is for running containerized apps or microservices on a serverless platform.",
        "author": "Azure Dev",
        "source": "https://github.com/Azure-Samples/todo-python-mongo-aca",
        "tags": [
            "bicep",
            "python",
            "typescript",
            "javascript",
            "aca",
            "cosmosdb",
            "monitor",
            "keyvault",
            "mongodb",
            "reactjs",
            "fastapi",
            "msft"
        ],
        "id": "b808d61c-f3af-4fa6-842d-39710b893b81",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Container Apps",
            "Azure Cosmos DB",
            "Azure Monitor",
            "Azure Key Vault"
        ],
        "sampleQueries": [
            "How can I deploy a React.js web application with a Python FastAPI backend on Azure?",
            "What are the steps to setup a MongoDB API in Cosmos database for a containerized web app?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "Python",
            "Typescript",
            "Javascript",
            "Reactjs",
            "MongoDB",
            "FastAPI"
        ],
        "keyFeatures": [
            "React.js web app frontend",
            "Python (FastAPI) API backend",
            "MongoDB API in Cosmos database",
            "Infrastructure as Code with Bicep",
            "Running containerized apps or microservices on Azure",
            "Azure Container Apps for hosting frontend and backend",
            "Azure Monitor for monitoring and logging",
            "Azure Key Vault for securing secrets",
            "Azure Developer CLI for building, deploying, and monitoring",
            "Quickstart provisioning and deployment with Azure Developer CLI",
            "Support for multiple Azure locations",
            "Architecture diagram and high-level overview",
            "Managed identity and Azure AD authentication",
            "Secure secret storage with Azure Key Vault",
            "Cost estimation using Azure Pricing Calculator",
            "Setup CI/CD pipeline with azd pipeline config",
            "Monitoring with azd monitor",
            "Run and debug locally with azd and Visual Studio Code",
            "Delete resources with azd down",
            "Optional features like APIM for enhanced backend API protection and observability",
            "GitHub Discussions for community support",
            "Reporting issues and feedback mechanism"
        ]
    },
    {
        "title": "React Web App with C# API and SQL Database ",
        "description": "A blueprint for getting a React web app with a C# API and a SQL database on Azure. The blueprint includes sample application code (a ToDo web app) which can be removed and replaced with your own application code. Add your own source code and leverage the Infrastructure as Code assets (written in Bicep) to get up and running quickly.",
        "author": "Azure Dev",
        "source": "https://github.com/Azure-Samples/todo-csharp-sql",
        "tags": [
            "bicep",
            "dotnetCsharp",
            "typescript",
            "javascript",
            "appservice",
            "azuresql",
            "monitor",
            "keyvault",
            "mongodb",
            "reactjs",
            "msft"
        ],
        "id": "1a0d0c97-261a-4bce-a699-f72b83e5bcea",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure App Service",
            "Azure SQL Database",
            "Azure Monitor",
            "Azure Key Vault"
        ],
        "sampleQueries": [
            "How can I set up a React web app with a C# backend and SQL database on Azure?",
            "Can I use the provided Bicep templates for deploying a full stack application with React, C#, and Azure SQL?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "Csharp",
            "Typescript",
            "Javascript",
            "Reactjs",
            "Azure SQL Database",
            "HTML"
        ],
        "keyFeatures": [
            "React web app with C# API",
            "SQL database",
            "Infrastructure as Code with Bicep",
            "Azure App Services for hosting",
            "Azure SQL Database for storage",
            "Azure Monitor for monitoring and logging",
            "Azure Key Vault for securing secrets",
            "Azure Developer CLI for build, deploy, and monitor",
            "Sample ToDo application",
            "Supports replacing sample code with own application code",
            "Quickstart guide for Azure setup",
            "Application architecture diagram",
            "Cost estimation with pricing calculator",
            "CI/CD pipeline configuration with Azure Developer CLI",
            "Local run and debug using Visual Studio Code",
            "Azure DevOps integration",
            "Managed identity for authentication",
            "Role-based access control",
            "Secure credential storage in Key Vault"
        ]
    },
    {
        "title": "React Web App with Java API and MongoDB ",
        "description": "A blueprint for getting a React.js web app with a Java API and a MongoDB database on Azure. The blueprint includes sample application code (a ToDo web app) which can be removed and replaced with your own application code. Add your own source code and leverage the Infrastructure as Code assets (written in Bicep) to get up and running quickly. This architecture is for hosting web apps and APIs without worrying about the infrastructure.",
        "author": "Azure Dev",
        "source": "https://github.com/Azure-Samples/todo-java-mongo",
        "tags": [
            "bicep",
            "java",
            "typescript",
            "appservice",
            "cosmosdb",
            "keyvault",
            "monitor",
            "mongodb",
            "reactjs",
            "msft"
        ],
        "id": "c1af6086-4f34-4350-aea5-81e103d7e3eb",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure App Service",
            "Azure Cosmos DB",
            "Azure Monitor",
            "Azure Key Vault"
        ],
        "sampleQueries": [
            "How do I set up a React.js web app with a Java API using Azure?",
            "What's the quickest way to deploy a React application with MongoDB on Azure?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "Java",
            "Typescript",
            "HTML",
            "Reactjs",
            "MongoDB",
            "CosmosDB"
        ],
        "keyFeatures": [
            "React.js web app",
            "Java API",
            "MongoDB database",
            "Azure Developer CLI (azd) for build, deploy, and monitor",
            "Infrastructure as Code assets written in Bicep",
            "Sample application code (ToDo web app)",
            "Azure App Services for hosting web frontend and API backend",
            "Azure Cosmos DB API for MongoDB for storage",
            "Azure Monitor for monitoring and logging",
            "Azure Key Vault for securing secrets",
            "GitHub Codespaces integration",
            "Visual Studio Code Dev Containers integration",
            "CI/CD pipeline configuration with azd pipeline config",
            "Application monitoring with azd monitor",
            "Run and debug locally using Visual Studio Code",
            "Managed identity for Azure Active Directory tenant authentication",
            "Securely storing secrets with Azure Key Vault"
        ]
    },
    {
        "title": "Containerized React Web App with Java API and MongoDB",
        "description": "A blueprint for getting a React web app with a Java API and a MongoDB database on Azure. The blueprint includes sample application code (a ToDo web app) which can be removed and replaced with your own application code. Add your own source code and leverage the Infrastructure as Code assets (written in Bicep) to get up and running quickly. This architecture is for running containerized apps or microservices on a serverless platform.",
        "author": "Azure Dev",
        "source": "https://github.com/Azure-Samples/todo-java-mongo-aca",
        "tags": [
            "bicep",
            "java",
            "typescript",
            "appservice",
            "cosmosdb",
            "keyvault",
            "monitor",
            "mongodb",
            "reactjs",
            "msft"
        ],
        "id": "f5d0f91a-0ebc-4fe4-86cd-6414f810d54d",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure App Service",
            "Azure Cosmos DB",
            "Azure Container Apps",
            "Azure Container Registry",
            "Azure Monitor",
            "Azure Key Vault"
        ],
        "sampleQueries": [
            "How can I containerize a React and Java application on Azure?",
            "What are the steps to deploy a React web app with Java API and MongoDB on Azure?",
            "Can I find a blueprint for a serverless microservices architecture on Azure with React and Java?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "Java",
            "Typescript",
            "HTML",
            "MongoDB",
            "Reactjs"
        ],
        "keyFeatures": [
            "React web app with Java API",
            "MongoDB database",
            "Azure Container Apps hosting",
            "Azure Cosmos DB for storage",
            "Azure Developer CLI integration",
            "Sample ToDo app",
            "Infrastructure as Code with Bicep",
            "Supports containerized apps",
            "Serverless platform",
            "Azure Monitor for logging and monitoring",
            "Azure Key Vault for secrets management",
            "Supports CI/CD pipeline configuration via Azure DevOps or GitHub Actions",
            "Visual Studio Code integration for local debugging and running",
            "Managed identity for authentication",
            "Quick deployment with azd commands",
            "Specific Azure location support"
        ]
    },
    {
        "title": "Static React Web App + Functions with C# API and SQL Database",
        "description": "A blueprint for getting a React web app with a C# API and a SQL database on Azure. The blueprint includes sample application code (a ToDo web app) which can be removed and replaced with your own application code. Add your own source code and leverage the Infrastructure as Code assets (written in Bicep) to get up and running quickly. This architecture is for hosting static web apps with serverless logic and functionality.",
        "author": "Azure Dev",
        "source": "https://github.com/Azure-Samples/todo-csharp-sql-swa-func",
        "tags": [
            "bicep",
            "swa",
            "functions",
            "dotnetCsharp",
            "typescript",
            "javascript",
            "monitor",
            "keyvault",
            "reactjs",
            "appservice",
            "azuresql",
            "msft"
        ],
        "id": "262a5d45-4d80-4aaa-8fba-f27d2876dcdb",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Static Web Apps",
            "Azure Functions",
            "Azure SQL Database",
            "Azure Monitor",
            "Azure Key Vault"
        ],
        "sampleQueries": [
            "How do I deploy a React web app with a C# API and SQL database on Azure?",
            "What is the process to use Bicep templates for setting up a static web app with Azure functions?",
            "Can I integrate Azure Key Vault with a Static React Web App and C# backend?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "C#",
            "Typescript",
            "Javascript",
            "Reactjs",
            "Azure SQL Database"
        ],
        "keyFeatures": [
            "Static React web app",
            "C# API backend",
            "SQL database",
            "Sample application code (ToDo web app)",
            "Infrastructure as Code assets (written in Bicep)",
            "Azure Static Web Apps for hosting",
            "Azure Function Apps for API backend",
            "Azure SQL for storage",
            "Azure Monitor for monitoring and logging",
            "Azure Key Vault for securing secrets",
            "Azure Developer CLI for building, deploying, and monitoring",
            "Support for creating and configuring CI/CD pipelines",
            "Run and debug locally using Visual Studio Code",
            "Azure DevOps support",
            "Managed identity for Azure AD authentication",
            "Securely store secrets in Azure Key Vault"
        ]
    },
    {
        "title": "Kubernetes React Web App with Node.js API and MongoDB",
        "description": "A blueprint for getting a React.js web app with a Node.js API and a MongoDB database on Azure. The blueprint includes sample application code (a ToDo web app) which can be removed and replaced with your own application code. Add your own source code and leverage the Infrastructure as Code assets (written in Bicep) to get up and running quickly. This architecture is for running Kubernetes clusters without setting up the control plane.",
        "author": "Azure Dev",
        "source": "https://github.com/Azure-Samples/todo-nodejs-mongo-aks",
        "tags": [
            "bicep",
            "nodejs",
            "typescript",
            "javascript",
            "mongodb",
            "monitor",
            "keyvault",
            "reactjs",
            "appservice",
            "cosmosdb",
            "aks",
            "msft"
        ],
        "id": "93b22870-f071-4104-ada9-ba45e71329a1",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Kubernetes Service",
            "Azure Cosmos DB",
            "Azure Monitor",
            "Azure Key Vault"
        ],
        "sampleQueries": [
            "How do I deploy a React.js web app with Node.js and MongoDB on Azure using Kubernetes?",
            "Can I set up a Kubernetes cluster on Azure without managing the control plane for a Node.js API?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "Nodejs",
            "Typescript",
            "Javascript",
            "Reactjs",
            "MongoDB",
            "CosmosDB"
        ],
        "keyFeatures": [
            "React.js web app",
            "Node.js API",
            "MongoDB database",
            "Azure Developer CLI (azd)",
            "Infrastructure as Code with Bicep",
            "Azure Kubernetes Service (AKS)",
            "Azure Cosmos DB API for MongoDB",
            "Azure Monitor",
            "Azure Key Vault",
            "Sample ToDo web app code included",
            "Kubernetes deployment manifests",
            "Pipeline setup with Azure DevOps or GitHub Actions",
            "Azure role-based access control",
            "Helm and Kustomize support"
        ]
    },
    {
        "title": "Static React Web App with Java API and PostgreSQL",
        "description": "A blueprint for getting a React web app with a Java API and a Azure Database for PostgreSQL - Flexible Server on Azure. The blueprint includes sample application code (a ToDo web app) which can be removed and replaced with your own application code. Add your own source code and leverage the Infrastructure as Code assets (written in Bicep) to get up and running quickly. This architecture is for hosting web apps and APIs without worrying about the infrastructure.",
        "author": "Yi Liu",
        "source": "https://github.com/Azure-Samples/ASA-Samples-Web-Application",
        "tags": [
            "bicep",
            "java",
            "nodejs",
            "spring",
            "webapps",
            "azurespringapps",
            "azuredb-postgreSQL",
            "msft"
        ],
        "id": "757881c8-74ad-4f62-9633-7af22a2be3aa",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Spring Apps",
            "Azure Database for PostgreSQL"
        ],
        "sampleQueries": [
            "How can I set up a React web app with a Java API and PostgreSQL on Azure using Bicep templates?",
            "What is the quickest way to deploy a web app with Azure Database for PostgreSQL using Azure Spring Apps?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "Java",
            "Typescript",
            "HTML",
            "PostgreSQL",
            "Spring"
        ],
        "keyFeatures": [
            "React web app",
            "Java API",
            "Azure Database for PostgreSQL - Flexible Server",
            "Sample application code (a ToDo web app)",
            "Infrastructure as Code assets (written in Bicep)",
            "Runs containerized apps or microservices on a serverless platform",
            "Deploy to Azure Spring Apps",
            "Java 17 or later for API backend",
            "Node.js with npm (16.13.1+) for the Web frontend",
            "Docker",
            "Azure Developer CLI (azd) for build, deploy, and run",
            "Powershell 7 if using Windows",
            "Quickstart guide for setup",
            "Supports multiple plans (Consumption, Basic/Standard, Enterprise)",
            "High level architecture using a Resource Group",
            "Application Resource: Azure Spring Apps",
            "Application Resource: Azure PostgreSQL - Flexible Server",
            "Template structured to follow the Azure Developer CLI",
            "azd commands for managing lifecycle (azd up, azd down, etc.)"
        ]
    },
    {
        "title": "ChatGPT Plugin using Python (FastAPI)",
        "description": "This is a quickstart for creating a ChatGPT Plugin using Python and Azure.",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure-Samples/openai-plugin-fastapi",
        "tags": [
            "bicep",
            "python",
            "aca",
            "cosmosdb",
            "monitor",
            "fastapi",
            "ai",
            "msft"
        ],
        "id": "e64314dd-aa61-4175-959d-ffa624b0423d",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Container Apps",
            "Azure Cosmos DB",
            "Azure Monitor"
        ],
        "sampleQueries": [
            "How to create a ChatGPT Plugin using Python on Azure?",
            "What are the steps to deploy a FastAPI application with ChatGPT support on Azure?",
            "Can I use CosmosDB and Azure Monitor with a Python ChatGPT plugin on Azure?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Python",
            "FastAPI"
        ],
        "keyFeatures": [
            "One-click setup with GitHub Codespaces",
            "Add API routes quickly with GitHub Copilot",
            "Run the API locally, in Dev Container, or in Codespaces",
            "Easy deployment to Azure using Azure Developer CLI or GitHub Actions",
            "Test the plugin directly in ChatGPT",
            "Automatic updates and debugging with VS Code",
            "Use FastAPI for API development",
            "Templates for Azure Container Apps deployment"
        ]
    },
    {
        "title": "ChatGPT + Enterprise Data with Azure OpenAI and AI Search",
        "description": "A sample app for the Retrieval-Augmented Generation pattern running in Azure, using Azure AI Search for retrieval and Azure OpenAI large language models to power ChatGPT-style and Q&A experiences.",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure-Samples/azure-search-openai-demo-csharp",
        "tags": [
            "bicep",
            "dotnetCsharp",
            "aks",
            "kubernetes",
            "aca",
            "aisearch",
            "openai",
            "gpt",
            "rediscache",
            "ai",
            "msft",
            "popular",
            "aicollection"
        ],
        "id": "fc3c956d-a8d3-4d60-87f6-d6b442f64602",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Kubernetes Service",
            "Azure Container Apps",
            "Azure Cognitive Search",
            "Azure OpenAI",
            "Azure Cache for Redis",
            "Azure Blob Storage",
            "Azure Monitor"
        ],
        "sampleQueries": [
            "How do I set up Azure Cognitive Search with Azure OpenAI for a ChatGPT-based solution?",
            "What are the steps to deploy ChatGPT with enterprise data on AKS using Azure Cognitive Search?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "C#",
            "HTML",
            "Blazor",
            "ASP.NET Core"
        ],
        "keyFeatures": [
            "Voice Chat, Chat and Q&A interfaces",
            "Explores various options to help users evaluate the trustworthiness of responses with citations, tracking of source content, etc.",
            "Shows possible approaches for data preparation, prompt construction, and orchestration of interaction between model (ChatGPT) and retriever (Azure AI Search)",
            "Settings directly in the UX to tweak the behavior and experiment with options",
            "User interface - The application\u2019s chat interface is a Blazor WebAssembly application",
            "Backend - The application backend is an ASP.NET Core Minimal API",
            "Orchestration of interactions among Azure AI Search, Azure OpenAI Service, and Semantic Kernel",
            "Azure AI Search indexes documents from the data stored in an Azure Storage Account",
            "Azure OpenAI Service provides the Large Language Models to generate responses using gpt-4o-mini",
            "Azure Developer CLI and .NET 8 support",
            "Different deployment options including GitHub Codespaces, VS Code Remote Containers, and local environment setup",
            "Enabling optional features like Application Insights and authentication",
            "Cost estimation guide with recommendations for minimizing costs",
            "Support for running locally and sharing environments",
            "Clean up resources command to avoid unnecessary costs",
            "Adjustable token per minute capacity for OpenAI",
            "Recommendation for using Standard_ZRS in Azure Storage for resiliency",
            "Azure AI Search scaling options",
            "Azure Container Apps auto-scaling and scheduled scaling rules",
            "Networking recommendations including Virtual Network and Azure API Management",
            "Loadtesting recommendation"
        ]
    },
    {
        "title": "Simple Chat Application using Azure OpenAI",
        "description": "A sample chat app that uses Python and the Flask framework to stream ChatGPT completions as server-sent events to a simple frontend.",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure-Samples/chatgpt-quickstart",
        "tags": [
            "bicep",
            "python",
            "openai",
            "gpt",
            "ai",
            "flask",
            "aca",
            "msft"
        ],
        "id": "3f85f8e5-619f-495b-bf49-c5bd6edaa350",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure OpenAI",
            "Azure Container Apps"
        ],
        "sampleQueries": [
            "How do I create a chat application using Azure OpenAI and Python?",
            "What is needed to stream ChatGPT completions through Flask in Azure?",
            "Can I use the Azure Container Apps service to deploy a Flask ChatGPT application?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "Python",
            "Flask"
        ],
        "keyFeatures": [
            "Uses Python and Flask framework",
            "Streams ChatGPT completions as server-sent events",
            "Generates responses with Azure OpenAI",
            "Includes infrastructure and configuration for Azure Container Apps",
            "Uses managed identity for authenticating with Azure OpenAI",
            "Supports deployment via Azure Developer CLI",
            "Python Quart backend for generating responses",
            "Basic HTML/JS frontend with JSON Lines and ReadableStream",
            "Provisioning Azure resources with Bicep files",
            "GitHub Codespaces and VS Code Dev Containers setup",
            "Local environment setup instructions",
            "Continuous deployment with GitHub Actions",
            "Managed Identity authentication",
            "Security guidelines and best practices"
        ]
    },
    {
        "title": "Spring ChatGPT Application using Azure OpenAI on Azure Spring Apps",
        "description": "A sample that uses Java Spring framework to build ChatGPT-style application running in Azure Spring Apps.",
        "author": "Yi Liu",
        "source": "https://github.com/Azure-Samples/spring-chatgpt-sample",
        "tags": [
            "bicep",
            "java",
            "openai",
            "gpt",
            "ai",
            "blobstorage",
            "azurespringapps",
            "msft"
        ],
        "id": "27170e89-7227-4bd0-a593-9a292498366f",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Spring Apps",
            "Azure Blob Storage",
            "Azure OpenAI"
        ],
        "sampleQueries": [
            "How to build a ChatGPT application with Java Spring on Azure Spring Apps",
            "Using Azure OpenAI with Java Spring framework for a ChatGPT-style application",
            "Step by step guide for setting up ChatGPT with Azure OpenAI and Java Spring"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "Java",
            "OpenAI",
            "Spring"
        ],
        "keyFeatures": [
            "Build a ChatGPT-like application with Java in Spring",
            "Run on Azure Spring Apps",
            "Use private data to answer questions",
            "Convert user's query text to an embedding",
            "Query nearest text chunks from the vector store by cosine similarity",
            "Populate the prompt template with text chunks",
            "Call OpenAI text completion API",
            "Load documents from local disk or Azure storage",
            "Split text into chunks and convert to embeddings",
            "Save embeddings into Vector Store",
            "Provision and run application on Azure with Azure Developer CLI (AZD)",
            "Deploy a fully functional ChatGPT app to the cloud",
            "Host application on Azure Spring Apps",
            "Utilize Azure OpenAI for ChatGPT capabilities",
            "Use Azure Storage for persistent storage",
            "Pre-built documentation vector store available",
            "Custom document loading into vector store",
            "Application architecture utilizes Azure Spring Apps, Azure OpenAI, and Azure Storage",
            "Use Azure CLI as an alternative to AZD",
            "Preprocess documents and load them into the vector store",
            "Run the application locally and on Azure Spring Apps",
            "Deploy with Azure CLI by creating resource groups and environments",
            "Create model deployments for text-embedding-ada-002 and gpt-35-turbo",
            "Add persistent storage to the app",
            "Deploy app JAR file to Azure Spring Apps",
            "Delete resources using AZD down command"
        ]
    },
    {
        "title": "Enterprise-Grade Reference Architecture for JavaScript",
        "description": "A reference architecture and components for building enterprise-grade modern composable frontends (or micro-frontends) and cloud-native applications. It is a collection of best practices, architecture patterns, and functional components that can be used to build and deploy modern JavaScript applications to Azure.",
        "author": "JavaScript Advocacy Team, Natalia Venditto",
        "source": "https://github.com/Azure-Samples/contoso-real-estate",
        "tags": [
            "bicep",
            "javascript",
            "swa",
            "aca",
            "keyvault",
            "blobstorage",
            "azuredb-postgreSQL",
            "cosmosdb",
            "apim",
            "enterprisepatterns",
            "msft",
            "popular"
        ],
        "id": "25a3dda0-8840-44dc-b850-4f2468991ecb",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Container Apps",
            "Azure Container Registry",
            "Azure Cosmos DB",
            "Azure Database for PostgreSQL",
            "Azure Functions",
            "Azure Key Vault",
            "Azure Monitor",
            "Azure Static Web Apps",
            "Azure Storage"
        ],
        "sampleQueries": [
            "How can I use the Enterprise-Grade Reference Architecture to build JavaScript applications in Azure?",
            "What are the best practices for setting up micro-frontends on Azure using the Enterprise-Grade Reference Architecture?",
            "Is there a sample implementation of cloud-native applications with Azure components like blob storage and Cosmos DB?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "JavaScript",
            "Typescript",
            "Nodejs",
            "Angular",
            "Next.js",
            "Strapi",
            "Fastify",
            "MongoDB",
            "PostgreSQL"
        ],
        "keyFeatures": [
            "Enterprise-grade modern composable frontends",
            "Cloud-native applications",
            "Best practices",
            "Architecture patterns",
            "Functional components",
            "AI Chatbot integration (RAG Pattern)",
            "Payments integration with Stripe",
            "Real-time Notifications",
            "Portal application with listings, favorites, user authentication and profile",
            "Headless CMS and blog",
            "Angular frontend",
            "Next.js frontend",
            "Playwright for end-to-end testing",
            "Azure Static Web Apps for hosting",
            "Strapi CMS",
            "Stripe for payment processing",
            "Fastify API",
            "Azure Functions API",
            "MongoDB for Azure Cosmos DB",
            "Azure Database for PostgreSQL",
            "Azure Storage",
            "Azure Container Apps for hosting",
            "Azure Application Insights for monitoring",
            "API Management",
            "Azure CLI for provisioning and deployment",
            "GitHub Actions for CI/CD",
            "Azure Developer CLI for CI/CD",
            "Visual Studio Code IDE",
            "GitHub Codespaces for cloud IDE",
            "Azure Static Web Apps CLI",
            "Node.js Development Environments",
            "Azure OpenAI integration"
        ]
    },
    {
        "title": "Python (Django) Web App with PostgreSQL in VNet",
        "description": "A restaurants review web app that uses whitenoise for static assets and PostgreSQL for the database. Ready for deployment on App Service with a PostgreSQL Flexible Server inside a VNet.",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure-Samples/msdocs-django-postgresql-sample-app",
        "tags": [
            "python",
            "django",
            "webapps",
            "azuredb-postgreSQL",
            "appservice",
            "vnets",
            "msft",
            "popular"
        ],
        "id": "aeb56402-db75-42d0-8d21-839d9d1e8158",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure App Service",
            "Azure Database for PostgreSQL",
            "Azure Virtual Network",
            "Azure Redis Cache"
        ],
        "sampleQueries": [
            "How do I deploy a Django web app with PostgreSQL on Azure App Service within a VNet?",
            "What is the best way to set up a Python Django web app with Azure Database for PostgreSQL on Azure?",
            "Can I use the AzD template to launch a restaurant review app with PostgreSQL in a virtual network?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Python",
            "Django",
            "HTML",
            "PostgreSQL"
        ],
        "keyFeatures": [
            "Django web application framework",
            "PostgreSQL database integration",
            "Whitenoise for static file serving",
            "Deployment on Azure App Service",
            "VNet integration for PostgreSQL Flexible Server",
            "Azure Redis Cache integration",
            "Development and deployment with Azure Developer CLI (AZD)",
            "Dev container configuration for local development",
            "Sample application demonstrating restaurant review functionality",
            "Environment variable management with python-dotenv",
            "Quick deployment with Azure Developer CLI",
            "Support for Django superuser creation via Azure Portal"
        ]
    },
    {
        "title": "Python (Django) Web App with PostgreSQL via Azure Container Apps",
        "description": "A space tourism web app that uses PostgreSQL for the database. The web app is containerize and deploy with Azure Container Apps with secrets managed by Azure Key Vault",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure-Samples/azure-django-postgres-aca",
        "tags": [
            "python",
            "django",
            "aca",
            "azuredb-postgreSQL",
            "bicep",
            "msft"
        ],
        "id": "1eab6419-b143-41d3-9b86-c8aeb9158fda",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Container Apps",
            "Azure Database for PostgreSQL",
            "Azure Key Vault"
        ],
        "sampleQueries": [
            "How can I deploy a Python Django web application using Azure Container Apps?",
            "What is the process for integrating PostgreSQL with a Django application on Azure?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Python",
            "Django",
            "Bicep",
            "HTML",
            "PostgreSQL"
        ],
        "keyFeatures": [
            "Deploys a web application for a space travel agency using Django with Python",
            "Uses PostgreSQL for the database",
            "Can be deployed with Azure Container Apps",
            "Secrets managed by Azure Key Vault",
            "Supports deployment via Azure Developer CLI",
            "Dev Container support for GitHub Codespaces and local VS Code",
            "Local PostgreSQL server setup instructions",
            "Python virtual environment setup and activation",
            "Database migrations and seed initial data",
            "Built-in Django admin interface",
            "Instructions for creating superuser and accessing admin interface",
            "Running the application locally",
            "Development requirements and testing setup",
            "Provisioning and deploying resources using Azure Developer CLI",
            "CI/CD pipeline with GitHub Actions workflow for deployment"
        ]
    },
    {
        "title": "Python (Flask) Web App with PostgreSQL in VNet",
        "description": "A restaurants review web app with a PostgreSQL database, written in the Python Flask framework plus SQL-Alchemy plus Alembic for database interactions. Ready for deployment on App Service with a PostgreSQL Flexible Server inside a VNet.",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure-Samples/msdocs-flask-postgresql-sample-app",
        "tags": [
            "python",
            "webapps",
            "azuredb-postgreSQL",
            "appservice",
            "vnets",
            "flask",
            "msft",
            "popular"
        ],
        "id": "6f229853-0a89-4b5c-8e7b-6fcca519147b",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure App Service",
            "Azure Database for PostgreSQL",
            "Azure Virtual Network"
        ],
        "sampleQueries": [
            "How can I deploy a Python Flask web app with PostgreSQL on Azure?",
            "How do I set up a Flask web app with PostgreSQL inside a VNet on Azure?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Python",
            "Bicep",
            "HTML",
            "Flask",
            "SQLAlchemy",
            "PostgreSQL"
        ],
        "keyFeatures": [
            "Python Flask framework",
            "PostgreSQL database",
            "SQL-Alchemy",
            "Alembic for database migrations",
            "Azure App Service deployment",
            "VNet integration",
            "Run locally and deploy to Azure",
            "Dev container configuration",
            "GitHub Codespaces compatibility",
            "Azure Developer CLI (azd) support",
            "Environment variables with python-dotenv",
            "WTForms for form rendering, validation, and CSRF protection",
            "Video deployment guide",
            "Documentation and support via GitHub Issues"
        ]
    },
    {
        "title": "Microservices App - Dapr PubSub C# ACA ServiceBus",
        "description": "A complete microservice application featuring Dapr Pub-Sub, deployed to Azure Container Apps and Azure Service Bus Topics with dead-lettering support.",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure-Samples/pubsub-dapr-csharp-servicebus",
        "tags": [
            "bicep",
            "dotnetCsharp",
            "aca",
            "dapr",
            "servicebus",
            "msft"
        ],
        "id": "fc959a8e-de77-48a5-b01c-d3effdb5265d",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Container Apps",
            "Azure Service Bus"
        ],
        "sampleQueries": [
            "How do I deploy a microservices app with Dapr PubSub in Azure Container Apps using C#?",
            "What is the best way to use Azure Service Bus Topics with Dapr in a .NET microservice architecture?",
            "How to handle dead-lettering in microservices using Azure Container Apps and Dapr?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "C#"
        ],
        "keyFeatures": [
            "Dapr Pub-Sub pattern implementation",
            "Publisher microservice to generate messages",
            "Subscriber microservice to listen for messages",
            "Support for Azure Service Bus with dead-lettering",
            "Deployment to Azure Container Apps",
            "Uses Dapr client SDK",
            ".NET 6 SDK based implementation",
            "Docker support for local development",
            "Azure Dev CLI for deployment initialization and management"
        ]
    },
    {
        "title": "Microservices App - Dapr PubSub Python ACA ServiceBus",
        "description": "A complete microservice application featuring Dapr Pub-Sub, deployed to Azure Container Apps and Azure Service Bus Topics with dead-lettering support.",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure-Samples/pubsub-dapr-python-servicebus",
        "tags": [
            "bicep",
            "python",
            "aca",
            "dapr",
            "servicebus",
            "msft"
        ],
        "id": "3689e30c-5ea3-4c69-9a3c-e34ee217a770",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Container Apps",
            "Azure Service Bus"
        ],
        "sampleQueries": [
            "How do I deploy a Python microservices app using Dapr PubSub on Azure?",
            "Can Azure Container Apps and Service Bus be used for Pub-Sub messaging in microservices?",
            "What is an example of using dead-lettering in Azure Service Bus Topics for a microservices application?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "Python",
            "Dapr"
        ],
        "keyFeatures": [
            "Dapr Pub-Sub integration",
            "Azure Container Apps deployment",
            "Azure Service Bus Topics with dead-lettering support",
            "Python microservice publisher and subscriber",
            "Docker and Dapr CLI dependencies",
            "Azure Dev CLI deployment"
        ]
    },
    {
        "title": "Microservices App - Dapr PubSub Node.js ACA ServiceBus",
        "description": "A complete microservice application featuring Dapr Pub-Sub, deployed to Azure Container Apps and Azure Service Bus Topics with dead-lettering support.",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure-Samples/pubsub-dapr-nodejs-servicebus",
        "tags": [
            "bicep",
            "javascript",
            "nodejs",
            "aca",
            "dapr",
            "servicebus",
            "msft"
        ],
        "id": "17c7f10c-45ff-4f1b-bba8-9e98cf1a8d54",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Container Apps",
            "Azure Service Bus"
        ],
        "sampleQueries": [
            "How do I set up a microservices app with Dapr PubSub in Azure Container Apps using Node.js?",
            "What is the method for deploying a Node.js microservices app with Azure Service Bus and dead-lettering?",
            "Can I use bicep templates to deploy a Dapr-enabled microservices application on Azure?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "Javascript",
            "Nodejs",
            "Dapr"
        ],
        "keyFeatures": [
            "Dapr Pub-Sub pattern",
            "Azure Container Apps deployment",
            "Azure Service Bus Topics with dead-lettering support",
            "Node.js microservices (publisher and subscriber)",
            "Dapr client SDK usage",
            "Docker integration",
            "Azure Dev CLI for deployment",
            "Sample application with message generator and subscriber",
            "Bicep infrastructure as code",
            "Async microservice communication"
        ]
    },
    {
        "title": "Microservices App - Dapr Bindings Cron C# ACA PostgreSQL",
        "description": "Create microservice to demonstrate Dapr's bindings API to work with external systems as inputs and outputs. The service listens to input binding events from a system CRON and then outputs the contents of local data to a PostgreSQL output binding.",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure-Samples/bindings-dapr-csharp-cron-postgres",
        "tags": [
            "dapr",
            "dotnetCsharp",
            "azuredb-postgreSQL",
            "aca",
            "msft"
        ],
        "id": "a3c9e1b9-b2fc-4957-a5e2-bd3a4fd9f601",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Database for PostgreSQL",
            "Azure Container Apps"
        ],
        "sampleQueries": [
            "How do I create a microservice using Dapr bindings with a CRON input and PostgreSQL output?",
            "Can you show me an example of a C# microservices app that uses Dapr with Azure Container Apps?",
            "What is the best way to integrate CRON jobs with Azure Database for PostgreSQL in a microservices architecture?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Dapr",
            "C#",
            "PostgreSQL",
            "Bicep"
        ],
        "keyFeatures": [
            "Microservice created with C#",
            "Demonstrates Dapr's bindings API",
            "Works with external systems as inputs and outputs",
            "Listens to input binding events from a system CRON",
            "Outputs contents of local data to a PostgreSQL output binding",
            "Supports running and developing locally using Docker Compose",
            "Runs .NET service with Dapr",
            "Processes a JSON file and outputs data to a SQL database",
            "Deploys to Azure with Azure Container Apps and Azure PostgreSQL",
            "Supports Azure Dev CLI for project initialization and deployment"
        ]
    },
    {
        "title": "Microservices App - Dapr Bindings Cron Python ACA PostgreSQL",
        "description": "Create a microservice app to demonstrate Dapr's bindings API to work with external systems as inputs and outputs. The service listens to input binding events from a system CRON and then outputs the contents of local data to a postgreSQL output binding.",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure-Samples/bindings-dapr-python-cron-postgres",
        "tags": [
            "dapr",
            "python",
            "azuredb-postgreSQL",
            "aca",
            "msft"
        ],
        "id": "e2515292-52ac-4d22-b87b-d8c3fd9219fa",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Database for PostgreSQL",
            "Azure Container Apps"
        ],
        "sampleQueries": [
            "How can I create a microservice with Dapr bindings in Python on Azure?",
            "What's the best way to implement a CRON input binding with Dapr and Azure?",
            "Can I use Azure Container Apps and PostgreSQL with Dapr for microservices?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Dapr",
            "Python",
            "Bicep",
            "PostgreSQL"
        ],
        "keyFeatures": [
            "Dapr bindings API integration",
            "Python-based microservice",
            "CRON input binding",
            "PostgreSQL output binding",
            "Azure Container Apps deployment",
            "Docker Compose for PostgreSQL container",
            "Event-driven processing",
            "Batch script execution every 10 seconds",
            "Deployable via Azure Dev CLI"
        ]
    },
    {
        "title": "Microservices App - Dapr Bindings Cron Node.js ACA PostgreSQL",
        "description": "Create a microservice app to demonstrate Dapr's bindings API to work with external systems as inputs and outputs. The service listens to input binding events from a system CRON and then outputs the contents of local data to a postgreSQL output binding.",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure-Samples/bindings-dapr-nodejs-cron-postgres",
        "tags": [
            "dapr",
            "nodejs",
            "azuredb-postgreSQL",
            "javascript",
            "aca",
            "msft"
        ],
        "id": "21a01a78-5c09-4fae-b42c-5b5793246560",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Database for PostgreSQL",
            "Azure Container Apps"
        ],
        "sampleQueries": [
            "How to use Dapr bindings in a Node.js microservices app on Azure?",
            "Can I use Azure Database for PostgreSQL as an output binding with Dapr?",
            "How to schedule tasks in a Node.js app with CRON and process them using Azure Container Apps?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Dapr",
            "Nodejs",
            "Javascript",
            "Bicep",
            "PostgreSQL"
        ],
        "keyFeatures": [
            "Demonstrates Dapr's bindings API to work with external systems",
            "Listens to input binding events from a system CRON",
            "Outputs the contents of local data to a PostgreSQL output binding",
            "Utilizes Node.js and JavaScript",
            "Runs locally using Docker Compose",
            "Deployable to Azure using Azure Container Apps and Azure PostgreSQL",
            "Automated batch script runs every 10 seconds",
            "Processes JSON data and inserts into a SQL database",
            "Includes setup and deployment commands for Azure Dev CLI"
        ]
    },
    {
        "title": "Microservices App - Dapr Service Invoke Node.js ACA",
        "description": "Create two microservices that communicate using Dapr's Service Invocation API. The Service Invocation API enables your applications to communicate reliably and securely by leveraging auto-mTLS and built-in retries.",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure-Samples/svc-invoke-dapr-nodejs",
        "tags": [
            "dapr",
            "nodejs",
            "aca",
            "msft"
        ],
        "id": "a98c5bd6-a080-44cf-a10c-5fcbf6588f30",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Container Apps"
        ],
        "sampleQueries": [
            "How do I use Dapr's Service Invocation API for microservices communication in Node.js?",
            "What are the benefits of using auto-mTLS with Dapr on Azure?",
            "Can you show me an example of microservices communicating securely with Dapr and Node.js on ACA?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Dapr",
            "Nodejs",
            "Javascript",
            "Bicep"
        ],
        "keyFeatures": [
            "Microservice communication using Dapr's Service Invocation API",
            "Reliability and security via auto-mTLS",
            "Built-in retries",
            "Node.js implementation",
            "Running locally with Dapr",
            "Order-processor service (callee)",
            "Checkout service (caller)",
            "Output verification for service invocation",
            "Deploy to Azure Container Apps",
            "Azure Dev CLI integration"
        ]
    },
    {
        "title": "Microservices App - Dapr Service Invoke Python ACA",
        "description": "Create two microservices that communicate using Dapr's Service Invocation API. The Service Invocation API enables your applications to communicate reliably and securely by leveraging auto-mTLS and built-in retries.",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure-Samples/svc-invoke-dapr-python",
        "tags": [
            "dapr",
            "python",
            "aca",
            "msft"
        ],
        "id": "46306dfe-017e-4d99-9240-e48309ba3726",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Container Apps"
        ],
        "sampleQueries": [
            "How can I create microservices that communicate with each other using Dapr in Python?",
            "What is Dapr's Service Invocation API and how to implement it in a Python microservices app?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Python",
            "Dapr",
            "Bicep"
        ],
        "keyFeatures": [
            "Create two microservices that communicate using Dapr's Service Invocation API",
            "Leverages auto-mTLS for secure communication",
            "Built-in retries for reliable communication",
            "Run and develop locally using Dapr",
            "Deploy to Azure using Azure Container Apps",
            "Initialize project with Azure Developer CLI",
            "Provision and deploy resources with azd up command",
            "Logs requests in Azure Container App resources"
        ]
    },
    {
        "title": "Microservices App - Dapr Service Invoke C# ACA",
        "description": "Create two microservices that communicate using Dapr's Service Invocation API. The Service Invocation API enables your applications to communicate reliably and securely by leveraging auto-mTLS and built-in retries.",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure-Samples/svc-invoke-dapr-csharp",
        "tags": [
            "dapr",
            "dotnetCsharp",
            "aca",
            "msft"
        ],
        "id": "b9afbe11-5351-4a6d-bd8a-77cf44a24e4f",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Container Apps"
        ],
        "sampleQueries": [
            "How do I use Dapr's Service Invocation API with C# microservices on Azure?",
            "What is the best way to setup secure microservices communication with Dapr on Azure?",
            "How to implement microservices with auto-mTLS and built-in retries using Dapr in Azure Container Apps?"
        ],
        "sourceType": "Azd",
        "tech": [
            "C#",
            "Bicep"
        ],
        "keyFeatures": [
            "Create two microservices with C# that communicate using Dapr's Service Invocation API",
            "Reliable and secure communication using auto-mTLS and built-in retries",
            "Run and develop locally using Dapr",
            "Deploy to Azure Container Apps for development and testing",
            "Dapr helps with service invocation for microservices",
            "Sample involves an order-processing service and a checkout service",
            "Use Azure Developer CLI for deployment"
        ]
    },
    {
        "title": "ChatGPT + Enterprise data with Azure OpenAI and AI Search",
        "description": "A sample app for the Retrieval-Augmented Generation pattern running in Azure, using Azure AI Search for retrieval and Azure OpenAI large language models to power ChatGPT-style and Q&A experiences.",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure-Samples/azure-search-openai-demo",
        "tags": [
            "openai",
            "gpt",
            "aisearch",
            "python",
            "typescript",
            "bicep",
            "nodejs",
            "ai",
            "msft",
            "popular",
            "blobstorage",
            "appservice",
            "aicollection",
            "speechservice"
        ],
        "id": "eebc5dce-43e7-4fc3-8b91-13573c8076df",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure OpenAI",
            "Azure Cognitive Search",
            "Azure Blob Storage",
            "Azure Monitor",
            "Azure App Service"
        ],
        "sampleQueries": [
            "What is the best way to use Azure OpenAI with Cognitive Search for enterprise data discovery?",
            "How can I integrate ChatGPT with Azure Cognitive Search in my organization?",
            "Can Azure OpenAI be used to improve search results over company-specific content?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Python",
            "Typescript",
            "Nodejs",
            "Bicep"
        ],
        "keyFeatures": [
            "Chat (multi-turn) and Q&A (single turn) interfaces",
            "Renders citations and thought process for each answer",
            "Includes settings directly in the UI to tweak the behavior and experiment with options",
            "Integrates Azure AI Search for indexing and retrieval of documents, with support for many document formats as well as integrated vectorization",
            "Optional usage of GPT-4 with vision to reason over image-heavy documents",
            "Optional addition of speech input/output for accessibility",
            "Optional automation of user login and data access via Microsoft Entra",
            "Performance tracing and monitoring with Application Insights"
        ]
    },
    {
        "title": "FastAPI on Azure Functions",
        "description": "A simple FastAPI app deployed to Azure Functions. Can also be run and debugged locally with the Azure Functions Core Tool emulator.",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure-Samples/fastapi-on-azure-functions",
        "tags": [
            "python",
            "fastapi",
            "functions",
            "msft"
        ],
        "id": "ec4855aa-505c-43b2-8bfd-3600c831d05a",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Functions"
        ],
        "sampleQueries": [
            "How do I deploy a FastAPI app to Azure Functions?",
            "Is there an example FastAPI application for Azure Functions?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Python",
            "FastAPI",
            "Bicep"
        ],
        "keyFeatures": [
            "Supports WSGI and ASGI-compatible frameworks",
            "HTTP-triggered Python functions",
            "Deployable to Azure Functions",
            "Can be run and debugged locally",
            "Includes FastAPI framework",
            "Sample app with predefined routes (/sample and /hello/{name})",
            "Deployable using VS Code, Azure CLI, or Azure Developer CLI",
            "Automatic provisioning of Function App, Storage account, and Log Analytics workspace",
            "Support for CI/CD pipeline setup",
            "Testable locally and in Azure"
        ]
    },
    {
        "title": "Spring PetClinic - Java Spring MySQL",
        "description": "Spring PetClinic application using a set of Azure solutions. Azure App Service for app hosting, Azure Database for MySQL for storage, Azure Key Vault for securing secret and Azure Application Insights for monitoring and logging.",
        "author": "Miller Wang",
        "source": "https://github.com/Azure-Samples/spring-petclinic-java-mysql",
        "tags": [
            "java",
            "appservice",
            "azuresql",
            "monitor",
            "keyvault",
            "appinsights",
            "bicep",
            "spring",
            "thymeleaf",
            "msft"
        ],
        "id": "a10a1a26-6f9a-4ca8-8b9b-e6a99a641d08",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure App Service",
            "Azure Database for MySQL",
            "Azure Key Vault",
            "Azure Monitor",
            "Azure Application Insights"
        ],
        "sampleQueries": [
            "How can I deploy the Java Spring PetClinic using Azure App Service and MySQL?",
            "What Azure solutions are best for hosting Spring-based applications like PetClinic?",
            "Can I secure application secrets using Azure Key Vault in the Spring PetClinic app?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Java",
            "Bicep",
            "HTML",
            "Spring",
            "Thymeleaf",
            "MySQL",
            "Spring"
        ],
        "keyFeatures": [
            "Azure App Service for app hosting",
            "Azure Database for MySQL for storage",
            "Azure Key Vault for securing secrets/passwords",
            "Azure Application Insights for monitoring and logging",
            "Integration with Azure Developer CLI (azd) for quick setup",
            "Run locally with IntelliJ IDEA and VSCode",
            "Infrastructure as code with Bicep",
            "Supports Java and Spring framework",
            "Template for easy provisioning and deployment",
            "Example of role-based access with managed identities",
            "Secure secret management with Azure Key Vault"
        ]
    },
    {
        "title": "Event Driven Java Application with Azure Service Bus on Azure Spring Apps",
        "description": "A complete event-driven application that includes everything you need to build, deploy, and monitor an Azure solution. ",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure-Samples/ASA-Samples-Event-Driven-Application",
        "tags": [
            "java",
            "servicebus",
            "monitor",
            "keyvault",
            "azurespringapps",
            "bicep",
            "spring",
            "msft"
        ],
        "id": "e18d18a8-e26f-4be3-b1fb-cee3acd730ed",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Spring Apps",
            "Azure Service Bus",
            "Azure Monitor",
            "Azure Key Vault"
        ],
        "sampleQueries": [
            "How can I start an event-driven Java application using Azure Service Bus and Azure Spring Apps?",
            "What are the best practices for monitoring Java applications on Azure Spring Apps?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Java",
            "Bicep",
            "Spring"
        ],
        "keyFeatures": [
            "Event-driven architecture",
            "Build and deploy with Azure Developer CLI",
            "Java application",
            "Azure Service Bus for messaging",
            "Azure Key Vault for secrets management",
            "Azure Monitor for monitoring and logging",
            "Azure Spring Apps for hosting",
            "Infrastructure as Code with Bicep",
            "Sample GitHub Actions pipeline",
            "Support for different Azure Spring Apps plans",
            "Managed identity for Azure AD authentication",
            "VS Code configuration included",
            "Quickstart guide",
            "Pipeline setup with azd pipeline config",
            "Resource cleanup with azd down command",
            "Scalable with Azure resources",
            "Security best practices with managed identity and Key Vault"
        ]
    },
    {
        "title": "SAP Cloud SDK on Azure App Service Quickstart (TypeScript)",
        "description": "This repos serves as quick-start project showcasing SAP Cloud SDK for JavaScript OData consumption running on Azure App Services. Its primary purpose is to set you up for success for your SAP extension project on Azure and reduce the lead time to your first successful deployment as much as possible with developer friendly commands.",
        "author": "Martin Pankraz, Christian Lechner",
        "source": "https://github.com/Azure-Samples/app-service-javascript-sap-cloud-sdk-quickstart",
        "tags": [
            "typescript",
            "nodejs",
            "bicep",
            "webapps",
            "apim",
            "keyvault",
            "appinsights",
            "nestjs",
            "sap",
            "sapcloudsdk",
            "msft"
        ],
        "id": "85052c4b-9602-421e-a654-573a6d3b429f",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure App Service",
            "Azure Monitor",
            "Azure Key Vault",
            "Azure API Management"
        ],
        "sampleQueries": [
            "How can I quickly start an SAP extension project on Azure using TypeScript?",
            "What are the steps to set up the SAP Cloud SDK for JavaScript on Azure App Service?",
            "Is there an AzD quickstart for connecting SAP OData services with Azure App Services?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Typescript",
            "Nodejs",
            "Bicep",
            "NestJS",
            "SAPCloudSDK"
        ],
        "keyFeatures": [
            "One code base to run on both Azure App Service and SAP Business Technology Platform",
            "Built in resiliency and caching patterns",
            "Native Azure authentication and token handling with Entra ID",
            "Configurable Azure API Management integration for SAP APIs",
            "Native Azure virtual network integration next to the SAP workload",
            "Enabled for SAP Private Link and Azure Private Link / Private Endpoint",
            "OData v2 and v4 + entity and client generator managed by SAP",
            "OpenAPI + client generator managed by SAP"
        ]
    },
    {
        "title": "Azure Functions - Text Summarization using AI Cognitive Language Service (C#-Isolated)",
        "description": "This sample shows how to take text documents as a input via BlobTrigger, does Text Summarization processing using the AI Congnitive Language service, and then outputs to another text document using BlobOutput binding.",
        "author": "Paul Yuknewicz",
        "source": "https://github.com/Azure-Samples/function-csharp-ai-textsummarize",
        "tags": [
            "functions",
            "aisearch",
            "dotnetCsharp",
            "azureai",
            "ai",
            "msft"
        ],
        "id": "abdec121-45cb-4e73-a005-d944579a8db0",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Functions",
            "Azure Cognitive Search"
        ],
        "sampleQueries": [
            "How do I set up Azure Functions for AI-based text summarization using Cognitive Language Service?",
            "What is the process to use BlobTrigger for text summarization in an Azure Function?"
        ],
        "sourceType": "Azd",
        "tech": [
            "C#",
            "Bicep"
        ],
        "keyFeatures": [
            "Text documents input via BlobTrigger",
            "Text Summarization using AI Cognitive Language service",
            "Outputs to another text document using BlobOutput binding",
            "Sample code in C# (Isolated)",
            "Usage of Azure Functions",
            "Integration with Azure Cognitive Services",
            "Local development support with .NET 8 SDK and Visual Studio 2022",
            "Azure Functions Core Tools for local running",
            "Support for Azurite for local Azure Storage emulation",
            "Environment variables for API key and endpoint configuration",
            "Azure Storage Explorer for managing storage",
            "Option to run with Visual Studio or VS Code",
            "Runs and debugs with Visual Studio or VS Code",
            "Deployment support with Azure Developer CLI"
        ]
    },
    {
        "title": "Azure Functions - Text Summarization using AI Cognitive Language Service (Python v2 Function)",
        "description": "This sample shows how to take text documents as a input via BlobTrigger, does Text Summarization processing using the AI Congnitive Language service, and then outputs to another text document using BlobOutput binding.",
        "author": "Paul Yuknewicz",
        "source": "https://github.com/Azure-Samples/function-python-ai-textsummarize",
        "tags": [
            "functions",
            "aisearch",
            "python",
            "azureai",
            "ai",
            "msft"
        ],
        "id": "df35a2f8-da36-43b2-92df-aba105170e8c",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Functions",
            "Azure Cognitive Services",
            "Azure Blob Storage"
        ],
        "sampleQueries": [
            "How can I use Azure Functions for AI-powered text summarization?",
            "Can I process documents with Text Summarization using Azure's AI Cognitive Language Service in Python?",
            "What is an example of using Azure Functions with BlobTrigger and BlobOutput for text summarization?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Python",
            "Bicep"
        ],
        "keyFeatures": [
            "Takes text documents as input via BlobTrigger",
            "Performs Text Summarization using AI Cognitive Language Service",
            "Outputs summarized text to another document using BlobOutput binding",
            "Implemented in Python v2 Function",
            "Suitable for local development with Python 3.7-3.11",
            "Requires Azure Functions Core Tools and Azurite",
            "Supports deployment via Azure Developer CLI",
            "Visual Studio Code integration for local development",
            "Environment variables support for storing API credentials",
            "Uses Azure Storage Explorer for managing blob storage"
        ]
    },
    {
        "title": "Reliable Web App Pattern for .NET",
        "description": "A multi-region enterprise web app with a 99.9% SLO and a focus on 12-factor apps and the well-architected framework. The sample app creates a concert booking application.",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure/reliable-web-app-pattern-dotnet",
        "tags": [
            "dotnetCsharp",
            "bicep",
            "appservice",
            "keyvault",
            "frontdoor",
            "azuresql",
            "appinsights",
            "blobstorage",
            "webapps",
            "enterprisepatterns",
            "msft"
        ],
        "id": "33da45cd-d26c-42c1-8b0a-ae4b79847dde",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure App Service",
            "Azure Key Vault",
            "Azure Front Door",
            "Azure SQL Database",
            "Azure Cache for Redis",
            "Microsoft Entra ID",
            "Azure Private DNS",
            "Azure Firewall",
            "Azure Bastion",
            "Azure Application Insights",
            "Azure App Configuration"
        ],
        "sampleQueries": [
            "How do I set up a multi-region enterprise web app with a 99.9% SLO using Azure?",
            "Can I create a concert booking application that follows the 12-factor app methodology on Azure?",
            "What Azure services are required to implement the Reliable Web App Pattern for .NET?"
        ],
        "sourceType": "Azd",
        "tech": [
            "C#",
            "Bicep",
            "Azure SQL Database"
        ],
        "keyFeatures": [
            "multi-region deployment",
            "99.9% SLO",
            "focus on 12-factor apps",
            "well-architected framework",
            "concert booking application",
            "production-grade implementation",
            "simulated migration from on-premises to Azure",
            "hub and spoke network topology",
            "cost-efficient resource reuse",
            "network traffic control and security",
            "global traffic routing with Azure Front Door",
            "Azure Web Application Firewall for security inspection",
            "static and dynamic content delivery",
            "session state management with Azure Cache for Redis",
            "user authentication with Microsoft Entra ID",
            "API interaction and token management",
            "payment and checkout flow",
            "purchase and ticket generation",
            "networking and access control",
            "monitoring and telemetry with Application Insights",
            "configuration and secrets management with Azure App Configuration and Azure Key Vault"
        ]
    },
    {
        "title": "React Component Toolkit with ChatGPT and OpenAI ",
        "description": "A sample demo for building and testing react components and includes a set of unique features including AI component generation and automatic conversion to Azure APIM Widgets",
        "author": "Jenny Chen",
        "source": "https://github.com/Azure-Samples/react-component-toolkit-openai-demo",
        "tags": [
            "bicep",
            "openai",
            "gpt",
            "ai",
            "apim",
            "reactjs",
            "typescript",
            "javascript",
            "msft"
        ],
        "id": "8d6366f6-78e8-4339-8073-ab55f900ecbd",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure API Management",
            "Azure OpenAI"
        ],
        "sampleQueries": [
            "How to generate React components using ChatGPT and OpenAI?",
            "Can I automatically convert React components to Azure APIM Widgets?",
            "Is there a toolkit for React with AI features including component testing?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "Reactjs",
            "Typescript",
            "Javascript",
            "CSS",
            "Node.js"
        ],
        "keyFeatures": [
            "Integrates with Azure Open AI allowing the creation of components from a description alone",
            "Can convert a react component into an Azure API Management Widget",
            "Can be tested standalone using ladle which is built into the toolkit stack",
            "Includes a few example components including a markdown viewer, force-graph-3d component, etc.",
            "Automatically adds dependencies for created components",
            "Uses css as code through Styled Components out of the box"
        ]
    },
    {
        "title": "Java Spring Apps with Azure OpenAI",
        "description": "AI Shopping Cart is a sample app template that supercharges your shopping experience with the power of AI. It leverages Azure OpenAI and Azure Spring Apps to build a recommendation engine that is not only scalable, resilient, and secure, but also personalized to your needs.",
        "author": "Pierre Malarme",
        "source": "https://github.com/Azure-Samples/app-templates-java-openai-springapps",
        "tags": [
            "spring",
            "openai",
            "ai",
            "aca",
            "azurespringapps",
            "azuredb-postgreSQL",
            "monitor",
            "reactjs",
            "bicep",
            "msft"
        ],
        "id": "1376d15a-343c-40d6-aaf3-38902d78c5ea",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure OpenAI",
            "Azure Spring Apps",
            "Azure Container Apps",
            "Azure Container Registry",
            "Azure Monitor",
            "Azure Database for PostgreSQL"
        ],
        "sampleQueries": [
            "How do I integrate Azure OpenAI into a Java Spring application for personalized recommendations?",
            "What's a good Azure-based architecture for a scalable and secure AI-powered shopping cart?",
            "Can I use Azure Spring Apps and Azure DB for PostgreSQL to create an AI shopping experience?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Java",
            "Spring",
            "Bicep",
            "HTML",
            "Typescript",
            "Azure OpenAI",
            "PostgreSQL"
        ],
        "keyFeatures": [
            "Supercharges shopping experience with AI",
            "Leverages Azure OpenAI for recommendation engine",
            "Utilizes Azure Spring Apps",
            "Scalable, resilient, and secure",
            "Personalized recommendations",
            "Performs nutrition analysis",
            "Generates top 3 recipes from cart items",
            "Uses Azure Developer CLI for deployment",
            "Hosts frontend in Azure Container Apps",
            "Hosts backend in Azure Spring Apps",
            "Stores data in Azure Database for PostgreSQL",
            "Monitors with Azure Monitor",
            "Azure OpenAI integration for AI functionalities",
            "Supports both GPT-4 and GPT-3.5 Turbo models",
            "Structured to follow Azure Developer CLI template conventions"
        ]
    },
    {
        "title": "Java - ChatGPT + Enterprise data with Azure OpenAI and AI Search",
        "description": "This repo is the java conversion of the well known chatGPT + Enterprise data code sample originally developed in python",
        "author": "Davide Antelmo",
        "source": "https://github.com/Azure-Samples/azure-search-openai-demo-java",
        "tags": [
            "java",
            "spring",
            "openai",
            "ai",
            "appservice",
            "aisearch",
            "semantickernel",
            "reactjs",
            "bicep",
            "msft",
            "aicollection"
        ],
        "id": "554ba579-08d0-49ac-9c12-01087c0096f6",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure OpenAI",
            "Azure Cognitive Search",
            "Azure App Service",
            "Azure Container Apps",
            "Azure Kubernetes Service",
            "Azure Monitor"
        ],
        "sampleQueries": [
            "How can I implement ChatGPT with enterprise data in Java using Azure OpenAI?",
            "Is there a Java version of the ChatGPT and Cognitive Search integration?",
            "What's the process to set up a Semantic Kernel for Cognitive Search in a Java spring application?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Java",
            "Bicep",
            "Typescript",
            "HTML",
            "Reactjs",
            "OpenAI",
            "Spring"
        ],
        "keyFeatures": [
            "Chat and Q&A interfaces",
            "Evaluates trustworthiness of responses with citations and source tracking",
            "Data preparation, prompt construction, and interaction orchestration",
            "AI orchestration with plain Java Open AI SDK or Java Semantic Kernel SDK",
            "User experience settings for behavior tweaking and experimentation",
            "Supports deployment on Azure App Service, Azure Container Apps, and Azure Kubernetes Service",
            "Different RAG implementation options with Java and Semantic Kernel",
            "Development options with dev containers or GitHub codespaces",
            "Platform-specific guidance for App Service, Azure Container Apps, and Azure Kubernetes Service",
            "Azure Application Landing Zones for production deployment"
        ]
    },
    {
        "title": "ChatGPT and RAG with Azure OpenAI and AI Search for JavaScript",
        "description": "A reference sample to build Retrieval Augmented Generation applications using Azure AI Search and Azure OpenAI.",
        "author": "JavaScript Advocacy Team, Natalia Venditto, Shibani Basava",
        "source": "https://github.com/Azure-Samples/azure-search-openai-javascript",
        "tags": [
            "ai",
            "bicep",
            "gpt",
            "aisearch",
            "javascript",
            "nodejs",
            "openai",
            "typescript",
            "webcomponents",
            "microfrontend",
            "msft",
            "aicollection",
            "rag"
        ],
        "id": "f343a991-c4a1-4edb-bd4f-c0b05aadf26e",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure OpenAI Service",
            "Azure Cognitive Search",
            "Azure Container Apps",
            "Azure Static Web Apps",
            "Azure Blob Storage",
            "Azure Monitor"
        ],
        "sampleQueries": [
            "How can I create a Retrieval Augmented Generation application using Azure Cognitive Search and Azure OpenAI?",
            "Is there a JavaScript example for integrating ChatGPT with Azure Cognitive Search?",
            "What is the best way to use Azure OpenAI for building a RAG application in Node.js?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "Javascript",
            "Node.js",
            "Typescript"
        ],
        "keyFeatures": [
            "Chat and Q&A interfaces",
            "Evaluates trustworthiness of responses with citations and source tracking",
            "Data preparation, prompt construction, and interaction orchestration between ChatGPT and Azure AI Search",
            "Settings in UX to tweak behavior and experiment with options",
            "Optional performance tracing and monitoring with Application Insights",
            "Sample data for end-to-end application trials",
            "Search service for search and retrieval capabilities",
            "Indexer service for data indexing",
            "Frontend web app for user interface and backend service interaction",
            "Multiple deployment methods: GitHub Codespaces, VS Code Remote Containers, Local environment",
            "Azure resources deployment with cost estimation guidelines",
            "Environment sharing and authentication setup",
            "Clean up resources with azd down command"
        ]
    },
    {
        "title": "Bicep template to bootstrap Azure Deployment Environments",
        "description": "A template to deploy Azure DevCenter with the minimun configuration to start using Azure Deployment Environments and supercharge your platform engineering story. Infrastructure as Code (written in Bicep) will get you started quickly to enable developers to self-serve environments via the Developer Portal, Azure CLI or CI/CD pipelines.",
        "author": "Azure Dev",
        "source": "https://github.com/Azure-Samples/azd-deployment-environments",
        "tags": [
            "bicep",
            "platformengineering",
            "ade",
            "msft"
        ],
        "id": "7e5276d7-b80c-4aa6-b8e6-750939a42ecd",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure DevCenter",
            "Azure Key Vault"
        ],
        "sampleQueries": [
            "How can I use Bicep templates to start with Azure Deployment Environments?",
            "How do I enable developers to self-serve environments in Azure using Bicep?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep"
        ],
        "keyFeatures": [
            "A template to deploy Azure DevCenter with minimum configuration",
            "Infrastructure as Code (IaC) using Bicep",
            "Quick start for Azure Developer CLI",
            "Enables developers to self-serve environments",
            "Deploys several Azure resources including resource groups, DevCenter, and Key Vault",
            "Sample environment types and projects included",
            "Modifiable DevCenter configuration",
            "Supports ARM templates and Terraform",
            "Uses catalogs with environment definitions",
            "Requires Azure subscription with Owner role",
            "Supports custom GitHub PAT for authentication with custom catalogs",
            "Provides Developer Portal for creating environments",
            "Supports Azure CLI and CI/CD pipelines for deployment"
        ]
    },
    {
        "title": "Azure OpenAI Conference Session Recommender",
        "description": "Build a recommender using OpenAI, Azure Functions, Azure Static Web Apps, Azure SQL DB, Data API builder and Text Embeddings",
        "author": "Davide Mauri",
        "source": "https://github.com/Azure-Samples/azure-sql-db-session-recommender",
        "tags": [
            "msft",
            "reactjs",
            "appservice",
            "functions",
            "azuresql",
            "swa",
            "appinsights",
            "openai",
            "azureai",
            "enterprisepatterns",
            "ai"
        ],
        "id": "8e354d6e-1957-4441-80d6-0d350fe8bea5",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Functions",
            "Azure Static Web Apps",
            "Azure SQL Database",
            "Azure OpenAI"
        ],
        "sampleQueries": [
            "How do I create a conference session recommender with Azure and OpenAI?",
            "What are the steps to build an app using Azure Functions and OpenAI for session recommendations?",
            "Can I integrate Text Embeddings with Azure SQL DB for a session recommendation system?"
        ],
        "sourceType": "Azd",
        "tech": [
            "C#",
            "SQL",
            "TSQL",
            "Javascript",
            "HTML",
            "Bicep"
        ],
        "keyFeatures": [
            "Azure Static Web Apps integration",
            "Azure OpenAI integration for generating text embeddings",
            "Azure Functions for event-driven architecture",
            "Azure SQL Database for storing and searching vector embeddings",
            "Data API builder for generating REST and GraphQL APIs",
            "Jamstack architecture",
            "Vector Similarity Search using cosine distance",
            "Integration with various Azure tools like Static Web App CLI, Azure Function CLI, Azure Data Studio, and SQL Server Management Studio",
            "GitHub Actions integration for CI/CD pipelines",
            "Custom authentication provider support for Azure Static Web Apps",
            "Retrieval Augmented Generation (RAG) support in enhanced version"
        ]
    },
    {
        "title": "Microservices App - Dapr PubSub Java AKS",
        "description": "Demonstrate event-driven communication between microservices by leveraging the pub/sub messaging architecture using Dapr for a Java application running in an AKS cluster.",
        "author": "Mahmut Canga",
        "source": "https://github.com/Azure-Samples/pubsub-dapr-aks-java",
        "tags": [
            "dapr",
            "java",
            "aks",
            "msft"
        ],
        "id": "27a9a8be-9479-4433-8ff6-9ce9af9c92b6",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Kubernetes Service",
            "Azure Cache for Redis"
        ],
        "sampleQueries": [
            "How can I implement pub/sub messaging in a Java microservices app using Dapr on AKS?",
            "Can I use Dapr for pub/sub architecture in a Java application? How do I set it up on AKS?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Dapr",
            "Java",
            "Bicep"
        ],
        "keyFeatures": [
            "Event-driven communication between microservices",
            "Pub/Sub messaging architecture",
            "Leveraging Dapr",
            "Java-based application",
            "Running in AKS cluster",
            "Asynchronous processing",
            "Sidecar pattern",
            "Kubernetes deployment",
            "Redis as message broker",
            "Multi-service deployment (Public API, Fraud Service, Account Service)",
            "Local and cloud (Azure) deployment options",
            "Automated build and deployment with Make",
            "Support for Azure Developer CLI",
            "Supports both local and Azure Kubernetes clusters",
            "Open source setup via Docker and Kind"
        ]
    },
    {
        "title": "Azure Functions - Chat using ChatGPT (Node.js JavaScript Function)",
        "description": "This sample shows how to take a ChatGPT prompt as HTTP Get or Post input, calculates the completions using OpenAI ChatGPT service, and then returns the output plus caches in a Blob state store.",
        "author": "Paul Yuknewicz",
        "source": "https://github.com/Azure-Samples/function-javascript-ai-openai-chatgpt",
        "tags": [
            "functions",
            "openai",
            "javascript",
            "ai",
            "gpt",
            "msft"
        ],
        "id": "c0405eae-fd20-4404-a742-a1c69c6004e7",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Functions",
            "Azure Blob Storage"
        ],
        "sampleQueries": [
            "How do I create an Azure Function to process ChatGPT prompts using Node.js?",
            "Is it possible to cache ChatGPT completions in Azure Blob with a JavaScript Function?",
            "Can OpenAI's ChatGPT be integrated with Azure Functions for HTTP interaction?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Node.js",
            "JavaScript",
            "Bicep",
            "HTML"
        ],
        "keyFeatures": [
            "Handles HTTP Get or Post input",
            "Uses OpenAI ChatGPT service for completions",
            "Returns output and caches in Blob state store",
            "Implemented with Node.js and JavaScript",
            "Utilizes Azure Functions",
            "Requires Node.js 18 or higher",
            "Requires Azure Functions Core Tools 4.0.5198 or higher",
            "Requires OpenAPI API key",
            "Local development support with local.settings.json",
            "CLI support for running with npm and func",
            "Supports REST clients and curl for testing",
            "Stores chat output in Blob for state management",
            "Customizable code with OpenAI",
            "Provision and deploy using Azure Dev CLI (AZD)",
            "GitHub Codespaces support"
        ]
    },
    {
        "title": "Azure Functions - Chat using ChatGPT (Python v2 Function)",
        "description": "This sample shows how to take a ChatGPT prompt as HTTP Get or Post input, calculates the completions using OpenAI ChatGPT service, and then returns the output plus caches in a Blob state store.",
        "author": "Paul Yuknewicz",
        "source": "https://github.com/Azure-Samples/function-python-ai-openai-chatgpt",
        "tags": [
            "functions",
            "openai",
            "python",
            "ai",
            "gpt",
            "msft"
        ],
        "id": "120f1e71-3110-44e7-9cc6-03e611083e9d",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Functions"
        ],
        "sampleQueries": [
            "How to implement ChatGPT in Azure Functions using Python",
            "Can we cache ChatGPT responses in Blob storage with Azure Functions?",
            "What is the best way to use OpenAI ChatGPT service with Azure Functions?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Python",
            "Bicep"
        ],
        "keyFeatures": [
            "Handles ChatGPT prompts as HTTP Get or Post input",
            "Calculates completions using OpenAI ChatGPT service",
            "Returns output and caches results in a Blob state store",
            "Supports local development with Azure Functions Core Tools",
            "Python 3.8+ compatibility",
            "Can be deployed to Azure via Azure Dev CLI",
            "Includes example usage with curl, Postman, and VS Code RestClient",
            "Utilizes OpenAI API key for authentication",
            "Source code customizable with OpenAI examples and Playground"
        ]
    },
    {
        "title": "Azure Functions - LangChain with Azure OpenAI and ChatGPT (Python v2 Function)",
        "description": "This sample shows how to take a human prompt as HTTP Get or Post input, calculates the completions using chains of human input and templates. This is a starting point that can be used for more sophisticated chains.",
        "author": "Paul Yuknewicz",
        "source": "https://github.com/Azure-Samples/function-python-ai-langchain",
        "tags": [
            "functions",
            "python",
            "ai",
            "msft"
        ],
        "id": "0d1ed1f5-b136-4320-b31f-c516f959bbaf",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Functions",
            "Azure OpenAI"
        ],
        "sampleQueries": [
            "How can I create a chatbot with Azure Functions using LangChain and Azure OpenAI?",
            "What is the process for setting up LangChain with Azure OpenAI in Python Azure Functions?",
            "Can Azure Functions be used to calculate completions with LangChain and ChatGPT templates?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Python",
            "Bicep"
        ],
        "keyFeatures": [
            "Handles HTTP Get or Post input as human prompts",
            "Calculates completions using chains of human input and templates",
            "Built using Python v2 for Azure Functions",
            "Integrates with Azure OpenAI and ChatGPT",
            "Supports more sophisticated chain customization",
            "Can be run locally with Python 3.8+ and Azure Functions Core Tools",
            "Requires Azure OpenAPI API key, endpoint, and deployment",
            "Includes example configuration for local.settings.json",
            "Uses Functions CLI or Visual Studio Code for local development and testing",
            "Provides examples for REST clients like PostMan, curl, and RestClient in VS Code",
            "Deployable to Azure using Azure Dev CLI",
            "Key source code available for customization"
        ]
    },
    {
        "title": "Multi-repo ChatGPT and Enterprise data with Azure OpenAI and AI Search",
        "description": "Azure OpenAI at scale in a secure manner.",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure/GPT-RAG",
        "tags": [
            "openai",
            "gpt",
            "aisearch",
            "python",
            "typescript",
            "bicep",
            "nodejs",
            "ai",
            "msft"
        ],
        "id": "adbc2d95-6bb8-4b0d-b0cb-2c0f34c19c11",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure OpenAI",
            "Azure Cognitive Search"
        ],
        "sampleQueries": [
            "How to scale Azure OpenAI for enterprise use with ChatGPT?",
            "What is the best way to integrate ChatGPT with Azure Cognitive Search?",
            "Can I use a Multi-repo approach with Azure OpenAI and Cognitive Search for AI applications?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Python",
            "Typescript",
            "Nodejs",
            "Bicep"
        ],
        "keyFeatures": [
            "Retrieval-Augmented Generation pattern",
            "Azure AI Search for retrieval",
            "Azure OpenAI large language models",
            "Zero-trust security",
            "Responsible AI",
            "Enterprise-grade deployment",
            "Modular architecture with data ingestion, orchestrator, and app front-end",
            "Quick setup options with Azure Developer CLI",
            "Basic Architecture Deployment for quick demos",
            "Zero Trust Architecture Deployment for secure environments",
            "Integration with Azure services",
            "Customizable deployment settings",
            "Multi-environment CI/CD deployment guides",
            "Performance testing guide",
            "Conversation data querying and analysis",
            "Governance and pricing models"
        ]
    },
    {
        "title": "Azure Function with Event Hub with optional virtual network capabilities",
        "description": "An Azure Function app which sends events to and consumes from an Event Hub. The Function app can optionally be configured to integrate with a virtual network, and dependent resources configured with virtual network private endpoints. Managed identity is used for authentication to dependent resources.",
        "author": "Michael S. Collier",
        "source": "https://github.com/Azure-Samples/function-eventhub-vnet",
        "tags": [
            "bicep",
            "dotnetCsharp",
            "functions",
            "appinsights",
            "keyvault",
            "eventhub",
            "azurestorage",
            "vnets",
            "msft"
        ],
        "id": "9a4d5000-89de-4ec2-beb4-9212d335edd7",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Functions",
            "Azure Event Hubs",
            "Azure Key Vault",
            "Azure Storage",
            "Azure Virtual Network",
            "Azure Monitor",
            "Azure Application Insights",
            "Log Analytics"
        ],
        "sampleQueries": [
            "How do I deploy an Azure Function that connects to an Event Hub?",
            "Can I set up a virtual network with private endpoints when using Azure Functions and Event Hub?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "C#",
            "Dockerfile"
        ],
        "keyFeatures": [
            "Azure Function app with optional virtual network integration",
            "Sends events to and consumes events from Event Hub",
            "Managed identity for authentication to dependent resources",
            "Virtual network with optional private endpoints",
            "Azure Function Premium plan",
            "Application Insights integration",
            "Log Analytics workspace",
            "Key Vault with optional private endpoints",
            "Storage account with optional private endpoints",
            "Function triggers: Timer trigger and Event Hub trigger",
            "Supports local development and debugging",
            "Uses Azure Developer CLI for provisioning and deployment",
            "Optional use of virtual network and private endpoints"
        ]
    },
    {
        "title": "URL Shortener using Microsoft Orleans and Azure for hosting and data",
        "description": "An ASP.NET Core 8.0 web application to illustrate basic Microsoft Orleans concepts; such as working with Grains, Silos, and persistent state. Uses Azure Developer CLI (azd) to build, deploy, and monitor.",
        "author": "Azure Cosmos DB Content Team",
        "source": "https://github.com/azure-samples/orleans-url-shortener",
        "tags": [
            "bicep",
            "dotnetCsharp",
            "cosmosdb",
            "msft",
            "aca"
        ],
        "id": "904f5d00-aed0-40e9-9e00-12c9482ae5c9",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Cosmos DB",
            "Azure Container Apps"
        ],
        "sampleQueries": [
            "How do I create a URL Shortener with Microsoft Orleans and Azure?",
            "What steps are involved in deploying an ASP.NET Core web app using Azure Developer CLI?",
            "Can I use CosmosDB for state persistence with Microsoft Orleans in an Azure-hosted application?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "C#",
            "CosmosDB",
            "ASP.NET"
        ],
        "keyFeatures": [
            "Uses ASP.NET Core 8.0",
            "Illustrates basic Microsoft Orleans concepts",
            "Working with Grains and Silos",
            "Persistent state management",
            "Uses Azure Developer CLI (azd) for build, deploy, and monitor",
            "Hosted on Azure",
            "Integration with Azure Cosmos DB"
        ]
    },
    {
        "title": "Azure OpenAI priority-based load balancer with Azure Container Apps",
        "description": "A load balancer crafted specifically for Azure OpenAI, which is aware of 'retry-after' headers and intelligently pause traffic when certain OpenAI endpoints reach maximum capacity.",
        "author": "Andre Dewes",
        "source": "https://github.com/Azure-Samples/openai-aca-lb",
        "tags": [
            "aca",
            "openai",
            "ai",
            "msft",
            "bicep",
            "dotnetCsharp"
        ],
        "id": "c3694deb-a6d7-4c20-8bbf-f12486a503e3",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Container Apps",
            "Azure OpenAI"
        ],
        "sampleQueries": [
            "How do I set up a priority-based load balancer for Azure OpenAI services?",
            "What is the best way to manage traffic to Azure OpenAI endpoints with a load balancer?",
            "Can I use Azure Container Apps to intelligently handle OpenAI 'retry-after' responses?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "DotnetCsharp"
        ],
        "keyFeatures": [
            "Aware of HTTP status code error 429 and Retry-After headers",
            "Intelligently sends traffic to other OpenAI backends that are not throttling",
            "Priority-based backend consumption",
            "Immediate retries to different endpoints without waiting intervals",
            "Seamless exposure of a single endpoint while consuming two or more backends",
            "Built using the YARP C# reverse-proxy framework",
            "Dockerfile provided for building and deploying custom images",
            "Deployable using Azure Developer CLI",
            "Multiple deployment options including pre-built Docker image",
            "Configurable OpenAI endpoints via environment variables",
            "Global scope load balancer settings",
            "Logs generated for successful redirects and 429 errors",
            "Supports server-side failovers and scalability",
            "Passive health checks for backend state evaluation"
        ]
    },
    {
        "title": "Azure Kubernetes Service Store Demo",
        "description": "Sample microservices app for AKS demos, tutorials, and experiments.",
        "author": "AKS Content Team",
        "source": "https://github.com/azure-samples/aks-store-demo",
        "tags": [
            "terraform",
            "aks",
            "openai",
            "ai",
            "msft",
            "kubernetes",
            "helm"
        ],
        "id": "eff16b17-9019-4b60-8438-f49781946266",
        "deploymentOptions": [
            "azcli",
            "terraform"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Kubernetes Service",
            "Azure OpenAI",
            "Azure Cosmos DB",
            "Azure Container Registry",
            "Azure Service Bus",
            "Azure Monitor",
            "Azure Log Analytics",
            "Azure Managed Grafana",
            "Azure Key Vault"
        ],
        "sampleQueries": [
            "How do I set up a microservices app on Azure Kubernetes Service?",
            "What is a good AKS demo for learning Kubernetes with Terraform?",
            "Can I use Helm to deploy apps on the Azure Kubernetes Service?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Golang",
            "Javascript",
            "Rust",
            "Vue.js",
            "Dockerfile",
            "Python",
            "Bicep",
            "Terraform"
        ],
        "keyFeatures": [
            "Group of containerized microservices",
            "Easily deployable into an Azure Kubernetes Service (AKS) cluster",
            "Polyglot architecture",
            "Event-driven design",
            "Integration with OpenAI's GPT-3 models for product descriptions",
            "Multiple services: makeline-service, order-service, product-service, store-front, store-admin, virtual-customer, virtual-worker, ai-service, mongodb, rabbitmq",
            "Support for K8s deployment including AKS and other K8s providers",
            "Run locally with Docker Compose",
            "Run in cloud environments using GitHub Codespaces",
            "Azure Resource integrations: Azure OpenAI, Azure Kubernetes Service, Azure Cosmos DB, Azure Container Registry, Azure Service Bus, Azure Monitor, Azure Log Analytics, Azure Managed Grafana, Azure Key Vault",
            "Use of public images from GitHub Container Registry and Microsoft Container Registry"
        ]
    },
    {
        "title": "Setting up Azure OpenAI as a central capability within your organization",
        "description": "Unleash the power of Azure AI to all your application developers in a secure & manageable way with Azure API Management and Azure Container Apps, utilizing Azure OpenAI PTUs across your organization with chargeback capabilities.",
        "author": "Azure AI Content Team, Remco Brosky, Mick Vleeshouwer, Pascal van der Heiden",
        "source": "https://github.com/Azure/enterprise-azureai",
        "tags": [
            "bicep",
            "apim",
            "openai",
            "ai",
            "appinsights",
            "monitor",
            "enterprisepatterns",
            "aca",
            "dotnetCsharp",
            "msft"
        ],
        "id": "94b2c974-76a2-4df6-b9a7-7a9dbc9b707f",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure API Management",
            "Azure Container Apps",
            "Azure OpenAI"
        ],
        "sampleQueries": [
            "How do I manage Azure OpenAI services across my organization using API Management and Container Apps?",
            "Can I monitor Azure OpenAI usage and performance using Application Insights in a .NET C# environment?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "Csharp",
            "Nodejs",
            "Bash",
            "Powershell",
            "Dockerfile",
            "Json",
            "Xml",
            ".NET"
        ],
        "keyFeatures": [
            "Infrastructure-as-code",
            "CI/CD pipeline",
            "Secure Access Management",
            "Usage Monitoring & Cost Control",
            "Load Balance",
            "Streaming requests",
            "End-to-end sample",
            "Azure Redis Cache",
            "Secondary Azure OpenAI location",
            "Managed identities",
            "Virtual Network",
            "Azure Private DNS Zone",
            "Application Insights",
            "Log Analytics",
            "Azure Monitor Private Link Scope",
            "Private Endpoint",
            "Azure Container Apps",
            "Azure Container Registry",
            "Azure Cosmos DB",
            "Azure Key Vault",
            "Sample ChatApp"
        ]
    },
    {
        "title": "SAP Cloud SDK on Azure Functions Quickstart (TypeScript)",
        "description": "This repos serves as quick-start project showcasing SAP Cloud SDK for JavaScript OData consumption running on Azure Functions. Its primary purpose is to set you up for success for your SAP extension project on Azure and reduce the lead time to your first successful deployment as much as possible with developer friendly commands.",
        "author": "Martin Pankraz, Christian Lechner",
        "source": "https://github.com/Azure-Samples/functions-javascript-sap-cloud-sdk-quickstart",
        "tags": [
            "typescript",
            "nodejs",
            "bicep",
            "webapps",
            "apim",
            "keyvault",
            "appinsights",
            "nestjs",
            "sap",
            "sapcap",
            "msft"
        ],
        "id": "e2835a74-6bb9-4a15-b4d8-dae78ee6f0ad",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Functions",
            "Azure API Management",
            "Azure Monitor",
            "Azure Key Vault"
        ],
        "sampleQueries": [
            "How do I start a project using SAP Cloud SDK on Azure Functions with TypeScript?",
            "Can I use Node.js and the SAP Cloud SDK on Azure Functions for OData consumption?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Typescript",
            "Nodejs",
            "Bicep",
            "Nestjs"
        ],
        "keyFeatures": [
            "One code base to run on both Azure Functions and SAP Business Technology Platform",
            "Built in resiliency and caching patterns",
            "Native Azure authentication and token handling with Azure AD without any coding effort",
            "Configurable Azure API Management integration for SAP APIs including policy enforcement for use cases like request throttling and SAP token caching",
            "Native Azure virtual network integration next to the SAP workload",
            "Enabled for SAP Private Link and Azure Private Link / Private Endpoint",
            "OData v2 and v4 + entity and client generator managed by SAP",
            "OpenAPI + client generator managed by SAP",
            "Example uses the NEST framework module azure-func-http compatible with Azure Functions runtime v3"
        ]
    },
    {
        "title": "SAP CAP on Azure App Service Quickstart",
        "description": "This repos serves as quick-start project showcasing SAP Cloud Application Programming Model (CAP) for Node.js OData consumption from SAP S/4HANA running on Azure App Services backed with Azure Cosmos DB for PostgreSQL. SAP offers a native module cds-dbs for PostgreSQL integration.",
        "author": "Martin Pankraz, Volker Buzek",
        "source": "https://github.com/Azure-Samples/app-service-javascript-sap-cap-quickstart",
        "tags": [
            "nodejs",
            "bicep",
            "webapps",
            "apim",
            "keyvault",
            "appinsights",
            "nestjs",
            "sap",
            "cosmosdb",
            "azuredb-postgreSQL",
            "sapcloudsdk",
            "msft"
        ],
        "id": "87cca4d5-958c-4255-87ae-5df122ec34ad",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure App Service",
            "Azure API Management",
            "Azure Cosmos DB",
            "Azure Database for PostgreSQL"
        ],
        "sampleQueries": [
            "How do I get started with the SAP Cloud Application Programming Model on Azure?",
            "Can Azure App Service support SAP CAP with PostgreSQL backed by Azure Cosmos DB?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Nodejs",
            "Bicep",
            "Nestjs",
            "Javascript"
        ],
        "keyFeatures": [
            "Showcase of SAP Cloud Application Programming Model (CAP) for Node.js",
            "OData consumption from SAP S/4HANA",
            "Running on Azure App Services",
            "Integration with Azure Cosmos DB for PostgreSQL",
            "Native module cds-dbs for PostgreSQL integration",
            "Azure Developer CLI best practices",
            "Business Partner OData v2 API from SAP S/4HANA",
            "One code base for both Azure App Service and SAP Business Technology Platform",
            "Built-in resiliency and caching patterns",
            "Azure authentication and token handling with Entra ID",
            "Azure API Management integration for SAP APIs",
            "Azure virtual network integration",
            "Enabled for SAP Private Link and Azure Private Link / Private Endpoint",
            "OData v2 and v4 + entity and client generator managed by SAP",
            "OpenAPI + client generator managed by SAP",
            "Integration with Azure native databases",
            "Frictionless integration of Azure App Service app roles with SAP CAP authorization model via cds-entra-id",
            "Out-of-the-box support for remote debugging",
            "UI5-based app for UI rendering"
        ]
    },
    {
        "title": "Azure API Management policy for priority-based routing to Azure OpenAI",
        "description": "A load balancer policy crafted specifically for Azure OpenAI, which is aware of 'retry-after' headers and intelligently pause traffic when certain OpenAI endpoints reach maximum capacity.",
        "author": "Andre Dewes, Chris Ayers",
        "source": "https://github.com/Azure-Samples/openai-apim-lb",
        "tags": [
            "apim",
            "openai",
            "ai",
            "msft",
            "bicep"
        ],
        "id": "c0e05ee1-7abc-4c7e-b609-0b8374d221b8",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure API Management",
            "Azure OpenAI"
        ],
        "sampleQueries": [
            "How do I set up priority-based routing for Azure OpenAI using API Management?",
            "Can I use Azure Bicep templates to configure load balancing policies for OpenAI endpoints?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "Python",
            "XML",
            "YAML"
        ],
        "keyFeatures": [
            "Prioritized Traffic Routing",
            "No Delay in Backend Switching",
            "Provisioned Throughput Deployment (PTU)",
            "Fallback S0 Tier Deployments",
            "Manual Setup Instructions",
            "Azure Developer CLI (azd) Setup",
            "Detailed Explanation of API Management Policies",
            "FAQ Section",
            "Productionizing Guide",
            "Intelligent Handling of OpenAI Throttling"
        ]
    },
    {
        "title": "Langfuse on Azure",
        "description": "Deploy Langfuse (open-source LLM observability platform) to Azure Container Apps with PostgreSQL Flexible Server.",
        "author": "Pamela Fox",
        "source": "https://github.com/Azure-Samples/langfuse-on-azure",
        "tags": [
            "aca",
            "azuredb-postgreSQL",
            "keyvault",
            "ai",
            "msft",
            "bicep"
        ],
        "id": "3a69118c-f6c3-4d59-90c4-188975527db2",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Container Apps",
            "Azure Database for PostgreSQL"
        ],
        "sampleQueries": [
            "How can I deploy Langfuse to Azure Container Apps?",
            "Can I integrate Azure Key Vault with Langfuse for enhanced observability?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "Python",
            "PostgreSQL"
        ],
        "keyFeatures": [
            "Deploy Langfuse to Azure Container Apps",
            "Uses PostgreSQL Flexible Server",
            "Azure Developer CLI for deployment",
            "Open-source LLM observability platform",
            "Set up Entra-based authentication",
            "Integrate SDK into LLM applications",
            "Options for setup with GitHub Codespaces, VS Code Dev Containers, or local environment",
            "Script to set up necessary resources and environment variables",
            "Detailed deployment instructions",
            "Langfuse documentation integration"
        ]
    },
    {
        "title": "PostgreSQL + Pgvector",
        "description": "Deploy a PostgreSQL Flexible Server with Pgvector extension and keyless auth, then access it from Python scripts.",
        "author": "Pamela Fox",
        "source": "https://github.com/Azure-Samples/azure-postgres-pgvector-python",
        "tags": [
            "azuredb-postgreSQL",
            "ai",
            "msft",
            "bicep",
            "python"
        ],
        "id": "fa79ba6d-e558-4025-b5ea-23970851b075",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Database for PostgreSQL"
        ],
        "sampleQueries": [
            "How do I deploy a PostgreSQL Flexible Server with Pgvector on Azure?",
            "Can I use keyless auth to access a PostgreSQL server provisioned with Pgvector?",
            "How to access PostgreSQL with Pgvector from Python scripts?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "Python",
            "PostgreSQL"
        ],
        "keyFeatures": [
            "Deploy a PostgreSQL Flexible Server with pgvector extension enabled",
            "Password authentication disabled and Entra (Active Directory) authentication enabled",
            "Infrastructure-as-code (Bicep) to deploy PostgreSQL server",
            "Example Python scripts to demonstrate how to use pgvector",
            "Vector similarity search engine for PostgreSQL using vector embeddings",
            "GitHub Codespaces support",
            "VS Code Dev Containers support",
            "Local environment setup instructions",
            "Azure Developer CLI integration",
            "Python virtual environment and package installation support",
            "Azure account login and resource provisioning commands",
            "Configuration script to set environment variables for PostgreSQL server",
            "Example Python scripts for vector operations using pgvector with SQLAlchemy, psycopg2, asyncpg, and SQLModel"
        ]
    },
    {
        "title": "Azure Open AI management and logging via Azure API Management",
        "description": "To use Azure Open AI in production, you need to manage each application and user by issuing new keys, and monitor their usage such as number of tokens they consume and types of endpoint and mode they use. The solution uses Azure APIM and other resources to support such requirements.",
        "author": "Kenichiro Nakamura",
        "source": "https://github.com/microsoft/aoai-logging-with-apim",
        "tags": [
            "bicep",
            "msft",
            "ai",
            "openai",
            "apim",
            "keyvault",
            "dotnetCsharp"
        ],
        "id": "c0b0b2c7-596f-45ca-9df8-ff9355ac471e",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure API Management",
            "Azure OpenAI",
            "Azure Key Vault"
        ],
        "sampleQueries": [
            "How do I manage and log Azure Open AI applications with Azure API Management?",
            "What Azure resources are needed to track usage and issue new keys for Open AI services?",
            "Can I use Azure Key Vault and APIM to secure my Open AI applications?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "CSharp"
        ],
        "keyFeatures": [
            "Key Management",
            "Different throttling settings",
            "Monitor Token Usage",
            "Monitor Request/Response body and headers",
            "Different Formats",
            "Content Safety for Stream Response",
            "Create Usage Dashboard",
            "Multiple Endpoints",
            "Consolidate the endpoint access by hiding APIs behind the APIM instance",
            "Granular access control by issuing keys using subscriptions feature",
            "Use policies to manage APIs",
            "Manage APIs by using backends and security store keys and connection strings by using named values",
            "Out-of-box monitor capabilities and custom logger for detailed logging",
            "Use custom logging to log the request and response body",
            "APIM Policy handles network traffic and logging",
            "Solution uses VNet and Private Endpoints to secure Azure resources",
            "Supports azd CLI for deployment"
        ]
    },
    {
        "title": ".NET AI samples with Azure OpenAI",
        "description": ".NET samples demonstrating how to use AI in your .NET applications. Each sample demonstrate a specific AI scenario with only a few lines of code. It consists of a console application, running locally, that will send request(s) to an Azure OpenAI Service deployed in your Azure subscription",
        "author": "Frank Boucher",
        "source": "https://github.com/dotnet/ai-samples",
        "tags": [
            "ai",
            "openai",
            "dotnetCsharp",
            "azureai",
            "msft",
            "gpt",
            "dall-e",
            "semantickernel",
            "bicep"
        ],
        "id": "b33ac45a-f158-449d-8933-29f998143284",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure AI Services",
            "Azure OpenAI"
        ],
        "sampleQueries": [
            "How do I create a .NET application using Azure OpenAI for AI-powered features?",
            "What are some examples of AI integration in .NET apps with Azure OpenAI?",
            "Can I use GPT and DALL-E models in my .NET C# projects on Azure?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "C#"
        ],
        "keyFeatures": [
            "Demonstrates AI scenarios with .NET applications",
            "Uses Azure OpenAI Service",
            "Console applications running locally",
            "Tutorials for integrating AI into .NET apps",
            "Examples on using Semantic Kernel",
            "Quickstarts with OpenAI and Azure OpenAI SDK",
            "Chat application samples",
            "LLM core concepts",
            "End-to-End examples",
            "Local model implementation",
            "Vector databases and tokenizers",
            "Part of .NET Foundation",
            "MIT licensed"
        ]
    },
    {
        "title": "Azure OpenAI Conference Session Assistant",
        "description": "Build a conference assistant using using Vector Search and Retrieval Augmented Generator to allow attendees to ask questions about conference in natural language",
        "author": "Davide Mauri",
        "source": "https://github.com/Azure-Samples/azure-sql-db-session-recommender-v2",
        "tags": [
            "bicep",
            "msft",
            "reactjs",
            "appservice",
            "functions",
            "azuresql",
            "swa",
            "appinsights",
            "openai",
            "azureai",
            "enterprisepatterns",
            "ai"
        ],
        "id": "24831952-5b15-471d-9eb9-4dbdb61ae196",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Static Web Apps",
            "Azure Functions",
            "Azure SQL Database",
            "Azure OpenAI"
        ],
        "sampleQueries": [
            "RAG app with python",
            "rag with python",
            "RAG using python",
            "RAG app",
            "Retrieval Augemented generation with Python"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "Csharp",
            "Sql",
            "Tsql",
            "Javascript",
            "Html",
            "AzureOpenAI"
        ],
        "keyFeatures": [
            "Vector Search",
            "Retrieval Augmented Generation (RAG)",
            "Azure Static Web Apps",
            "Azure Functions",
            "Azure SQL Database",
            "Azure OpenAI",
            "Jamstack architecture",
            "Event-Driven architecture",
            "Azure Functions SQL Trigger Binding",
            "Data API builder",
            "Azure Developer CLI (azd) integration",
            "GitHub Actions integration",
            "Fluent UI for UI components",
            "Support for both native vector functions and classic T-SQL vector operations",
            "Manual deployment for private preview features"
        ]
    },
    {
        "title": "Dynamic Configuration for AKS workloads (w/o changing ConfigMaps or with Azure App Configuration)",
        "description": "A sample that demonstrates how to dynamically configure an Azure Kubernetes Service (AKS) workload with Azure App Configuration.",
        "author": "Azure App Configuration",
        "source": "https://github.com/Azure-Samples/azure-appconfig-aks",
        "tags": [
            "azureappconfig",
            "kubernetes",
            "aks",
            "dotnetCsharp",
            "bicep",
            "webapps",
            "msft"
        ],
        "id": "3b4599e6-bb03-4f19-bce8-5151a0225c7b",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Kubernetes Service",
            "Azure Container Registry",
            "Azure App Configuration"
        ],
        "sampleQueries": [
            "How do I dynamically configure AKS workloads using Azure App Configuration?",
            "Can Azure App Configuration be used with AKS without changing ConfigMaps?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "Csharp",
            "Powershell",
            "Bash",
            "HTML"
        ],
        "keyFeatures": [
            "Dynamic configuration for AKS workloads using Azure App Configuration",
            "Utilizes Azure Developer CLI and Bicep",
            "Includes Azure CLI configuration",
            "Provision and deploy to Azure with 'azd up'",
            "Predeploy hooks for installing additional cluster components",
            "Infrastructure as code with Bicep templates",
            "Deploy ASP.NET web application to AKS cluster",
            "Azure Kubernetes Service (AKS) cluster creation",
            "Azure Container Registry integration",
            "Azure App Configuration service integration",
            "Customizable application source and configuration updates",
            "Automated Kubernetes manifest application and token replacement",
            "Easy clean-up of deployed resources with 'azd down'"
        ]
    },
    {
        "title": "Chat with your Data Solution Accelerator",
        "description": "A Solution Accelerator for the RAG pattern running in Azure, using Azure AI Search for retrieval and Azure OpenAI large language models to power ChatGPT-style and Q&A experiences. This includes most common requirements and best practices.",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure-Samples/chat-with-your-data-solution-accelerator",
        "tags": [
            "bicep",
            "python",
            "typescript",
            "flask",
            "aisearch",
            "openai",
            "gpt",
            "ai",
            "msft",
            "rag"
        ],
        "id": "3450a16f-3b71-48ba-9bd5-c6568f105300",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure OpenAI",
            "Azure Cognitive Search",
            "Azure App Service",
            "Azure Bot Service",
            "Azure Document Intelligence",
            "Azure Functions",
            "Azure Storage Accounts",
            "Azure Speech Service",
            "Azure Cosmos DB"
        ],
        "sampleQueries": [
            "What is the Chat with your Data Solution Accelerator and how does it work?",
            "How can I implement a ChatGPT-style Q&A experience with Azure AI Search?",
            "Can I integrate OpenAI's language models with Azure Cognitive Search using the Solution Accelerator?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "Python",
            "Typescript",
            "Flask"
        ],
        "keyFeatures": [
            "Private LLM access on your data",
            "Single application access to your full data set",
            "Natural language interaction with your unstructured data",
            "Easy access to source documentation when querying",
            "Data upload",
            "Accessible orchestration"
        ]
    },
    {
        "title": "Azure Kubernetes Service Store Demo",
        "description": "Sample microservices app for AKS demos, tutorials, and experiments.",
        "author": "AKS Content Team",
        "source": "https://github.com/azure-samples/aks-store-demo",
        "tags": [
            "terraform",
            "aks",
            "openai",
            "ai",
            "msft",
            "kubernetes",
            "helm"
        ],
        "id": "9d295613-0607-4337-97b3-bdf702cd9252",
        "deploymentOptions": [
            "azcli",
            "terraform"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Kubernetes Service",
            "Azure OpenAI",
            "Azure Cosmos DB",
            "Azure Container Registry",
            "Azure Service Bus",
            "Azure Monitor",
            "Azure Log Analytics",
            "Azure Managed Grafana",
            "Azure Key Vault"
        ],
        "sampleQueries": [
            "How do I deploy a microservices app on Azure Kubernetes Service?",
            "Can I integrate OpenAI models into my Kubernetes app hosted on Azure?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Go",
            "Javascript",
            "Rust",
            "Python",
            "Bicep",
            "Terraform",
            "Vue.js",
            "Dockerfile",
            "Nodejs"
        ],
        "keyFeatures": [
            "Containerized microservices deployment",
            "Polyglot architecture",
            "Event-driven design",
            "Integration with RabbitMQ and MongoDB",
            "Generative AI using OpenAI's GPT-3 models",
            "Runs on Azure Kubernetes Service (AKS)",
            "Supports deployment via Kubernetes",
            "Local deployment using Docker Compose",
            "GitHub Codespaces support",
            "Azure Developer CLI deployment",
            "Sample order processing services",
            "Web applications for customers and store employees",
            "Scheduled order simulation services",
            "Optional AI service for text and graphics generation"
        ]
    },
    {
        "title": "Containerized Apps on Azure Kubernetes Service",
        "description": "A base Azure Kubernetes Service template with placeholders to include the application source code (no application source code included) and Kubernetes manifest files.",
        "author": "Ahmed Sabbour",
        "source": "https://github.com/sabbour/aks-app-template",
        "tags": [
            "aks",
            "kubernetes",
            "bicep",
            "grafana",
            "app",
            "keda",
            "prometheus",
            "Azure",
            "containers"
        ],
        "id": "3e709e9e-cfbf-44e5-8cac-52e0e371f4f8",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Kubernetes Service",
            "Azure Container Registry",
            "Azure Managed Grafana",
            "Azure Monitor"
        ],
        "sampleQueries": [
            "How do I start containerizing my app for AKS with an AzD template?",
            "What is the process to deploy a Bicep template to Azure Kubernetes Service?",
            "Can I monitor AKS containers with Grafana and Prometheus using the provided AzD workload?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep"
        ],
        "keyFeatures": [
            "Azure Developer CLI configuration",
            "Bicep templates",
            "Azure Kubernetes Service (AKS) cluster",
            "Azure Container Registry",
            "Azure Managed Grafana",
            "Azure Monitor managed service for Prometheus",
            "Event hooks for workflow customization",
            "Placeholder for application source code",
            "Placeholder for Kubernetes manifest files",
            "Dockerfile and Kubernetes manifest generation support",
            "Continuous integration/continuous deployment support",
            "Resources cleanup with azd down command"
        ]
    },
    {
        "title": "Kubernetes React Web App with Node.js API and MongoDB",
        "description": "A blueprint for getting a React.js web app with a Node.js API and a MongoDB database on Azure. The blueprint includes sample application code (a ToDo web app) which can be removed and replaced with your own application code. Add your own source code and leverage the Infrastructure as Code assets (written in Bicep) to get up and running quickly. This architecture is for running Kubernetes clusters without setting up the control plane.",
        "author": "Azure Dev",
        "source": "https://github.com/Azure-Samples/todo-nodejs-mongo-aks",
        "tags": [
            "bicep",
            "nodejs",
            "typescript",
            "javascript",
            "mongodb",
            "monitor",
            "keyvault",
            "reactjs",
            "appservice",
            "cosmosdb",
            "aks",
            "msft"
        ],
        "id": "f408ffe0-f200-4faa-b35e-2674e901cd12",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Kubernetes Service",
            "Azure Cosmos DB",
            "Azure Monitor",
            "Azure Key Vault"
        ],
        "sampleQueries": [
            "How do I deploy a React web app with Node.js API and MongoDB on Azure Kubernetes?",
            "Can I use Azure Key Vault to secure my Kubernetes deployed React application?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "Nodejs",
            "Typescript",
            "Javascript",
            "Reactjs",
            "MongoDB",
            "CosmosDB",
            "HTML"
        ],
        "keyFeatures": [
            "Blueprint for React web app with Node.js API and MongoDB database on Azure",
            "Includes sample ToDo app code",
            "Infrastructure as Code assets written in Bicep",
            "Running Kubernetes clusters without setting up the control plane",
            "Azure Developer CLI for build, deploy, and monitor",
            "Azure Kubernetes Service (AKS) for hosting",
            "Azure Cosmos DB API for MongoDB for storage",
            "Azure Monitor for monitoring and logging",
            "Azure Key Vault for securing secrets",
            "Supports Helm and Kustomize for AKS cluster configuration",
            "CI/CD pipeline configuration with GitHub Actions or Azure DevOps",
            "Local debugging and testing using Visual Studio Code and Azure Developer CLI extension"
        ]
    },
    {
        "title": "Quickstart: Deploy an Azure Kubernetes Service (AKS) cluster using Azure CLI",
        "description": "Learn how to quickly deploy a Kubernetes cluster and deploy an application in Azure Kubernetes Service (AKS) using Azure CLI.",
        "author": "Microsoft",
        "source": "https://raw.githubusercontent.com/MicrosoftDocs/executable-docs/main/scenarios/azure-docs/articles/aks/learn/quick-kubernetes-deploy-cli.md",
        "tags": [
            "kubernetes",
            "azure",
            "CLI",
            "aks",
            "deployment",
            "cluster",
            "application",
            "setup",
            "tutorial",
            "provision"
        ],
        "id": "faf0d1e7-daca-4783-b19e-ba2527d2d9d3",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {
            "execDocs": {
                "path": "azure-docs%2Farticles%2Faks%2Flearn%2Fquick-kubernetes-deploy-cli.md"
            }
        },
        "products": [
            "Azure Kubernetes Service",
            "Azure CLI"
        ],
        "sampleQueries": [
            "How do I deploy a Kubernetes cluster in Azure using the Azure CLI?",
            "What are the steps to set up an AKS cluster and deploy an application using Azure CLI?",
            "Can I find a tutorial for provisioning AKS with ExecDocs?"
        ],
        "sourceType": "ExecDocs",
        "tech": [
            "Kubernetes",
            "Azure CLI"
        ],
        "keyFeatures": [
            "Deploy an AKS cluster using Azure CLI",
            "Run a sample multi-container application with microservices and web front ends",
            "Managed Kubernetes service for quick deployment and management",
            "Configure kubectl to connect to Kubernetes cluster",
            "Manifest file defining desired state for application"
        ]
    },
    {
        "title": "Quickstart: Building your first static site with the Azure Static Web Apps using the CLI",
        "description": "Learn to deploy a static site to Azure Static Web Apps with the Azure CLI.",
        "author": "Microsoft",
        "source": "https://raw.githubusercontent.com/MicrosoftDocs/executable-docs/main/scenarios/azure-docs/articles/static-web-apps/get-started-cli.md",
        "tags": [
            "static",
            "azure",
            "webapp",
            "apps",
            "deployment",
            "cli",
            "tutorial",
            "site",
            "build",
            "AzureCLI"
        ],
        "id": "199d0d86-8cb0-431e-8acf-a3c5d9527fd0",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {
            "execDocs": {
                "path": "azure-docs%2Farticles%2Fstatic-web-apps%2Fget-started-cli.md"
            }
        },
        "products": [
            "Azure Static Web Apps"
        ],
        "sampleQueries": [
            "How do I deploy a static site using Azure CLI?",
            "Can I build and deploy a static web app on Azure without any prior experience?",
            "Where can I find a tutorial to get started with Azure Static Web Apps using the CLI?"
        ],
        "sourceType": "ExecDocs",
        "tech": [
            "AzureCLI",
            "HTML"
        ],
        "keyFeatures": [
            "Deploy web application using Azure CLI",
            "Publish websites to production from code repository",
            "Utilize GitHub template repository for starter app",
            "Define environment variables for deployment",
            "Create and manage resource groups in Azure",
            "Automatic build and publish workflow for web apps",
            "Use GitHub for repository management and CI/CD"
        ]
    },
    {
        "title": "Create virtual machines in a Flexible scale set using Azure CLI",
        "description": "Learn how to create a Virtual Machine Scale Set in Flexible orchestration mode using Azure CLI.",
        "author": "Microsoft",
        "source": "https://raw.githubusercontent.com/MicrosoftDocs/executable-docs/main/scenarios/azure-docs/articles/virtual-machine-scale-sets/flexible-virtual-machine-scale-sets-cli.md",
        "tags": [
            "virtual",
            "scaleset",
            "azure",
            "cli",
            "orchestration",
            "flexible",
            "deployment",
            "machine",
            "tutorial",
            "oneclick"
        ],
        "id": "1ef90b47-d262-4370-8731-e6568014100f",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {
            "execDocs": {
                "path": "azure-docs%2Farticles%2Fvirtual-machine-scale-sets%2Fflexible-virtual-machine-scale-sets-cli.md"
            }
        },
        "products": [
            "Azure Virtual Machine Scale Sets",
            "Azure CLI"
        ],
        "sampleQueries": [
            "How do I create a Flexible VM Scale Set using Azure CLI?",
            "What are the steps to deploy a virtual machine in a Flexible scale set with Azure?",
            "Can I find a tutorial for setting up virtual machines in a scale set via one-click in Azure?"
        ],
        "sourceType": "ExecDocs",
        "tech": [],
        "keyFeatures": "cannot access local variable 'response' where it is not associated with a value"
    },
    {
        "title": "Quickstart: Use the Azure CLI to create a Linux Virtual Machine",
        "description": "In this quickstart, you learn how to use the Azure CLI to create a Linux virtual machine",
        "author": "Microsoft",
        "source": "https://raw.githubusercontent.com/MicrosoftDocs/executable-docs/main/scenarios/azure-docs/articles/virtual-machines/linux/quick-create-cli.md",
        "tags": [
            "azure",
            "cli",
            "linux",
            "vm",
            "machine",
            "deployment",
            "tutorial",
            "createvm",
            "setup",
            "linux vm"
        ],
        "id": "c3a974f8-b27a-4dcc-97c5-4e1ae508ecca",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {
            "execDocs": {
                "path": "azure-docs%2Farticles%2Fvirtual-machines%2Flinux%2Fquick-create-cli.md"
            }
        },
        "sampleQueries": [
            "How to use Azure CLI to create a Linux virtual machine?",
            "What are the steps to deploy a Linux VM using Azure CLI?",
            "How to configure SSH access for a Linux VM created with Azure CLI?"
        ],
        "sourceType": "ExecDocs",
        "products": [
            "Azure Virtual Machines",
            "Azure CLI",
            "Azure Active Directory"
        ],
        "keyFeatures": [
            "Deploy a Linux virtual machine using Azure CLI",
            "Manage Azure resources via command line or scripts",
            "Enable Azure AD Login for a Linux virtual machine",
            "Store IP address of VM for SSH access",
            "Use Azure Cloud Shell for ease of running commands"
        ],
        "tech": [
            "Bash",
            "Linux"
        ]
    },
    {
        "title": "Tutorial - Deploy a LEMP stack using WordPress on a VM",
        "description": "In this tutorial, you learn how to install the LEMP stack, and WordPress, on a Linux virtual machine in Azure.",
        "author": "Microsoft",
        "source": "https://raw.githubusercontent.com/MicrosoftDocs/executable-docs/main/scenarios/azure-docs/articles/virtual-machines/linux/tutorial-lemp-stack.md",
        "tags": [
            "tutorial",
            "LEMP",
            "stack",
            "wordpress",
            "linux",
            "virtual",
            "machine",
            "azure",
            "installation",
            "setup"
        ],
        "id": "e17143e1-259a-43dd-8344-9d1ea02e6a7e",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {
            "execDocs": {
                "path": "azure-docs%2Farticles%2Fvirtual-machines%2Flinux%2Ftutorial-lemp-stack.md"
            }
        },
        "products": [
            "Azure Virtual Machines",
            "Azure Database for MySQL - Flexible Server",
            "Azure Private DNS",
            "Azure Network Security Groups",
            "Azure Virtual Network",
            "Azure Public IP",
            "Azure Cloud Shell",
            "Azure CLI"
        ],
        "sampleQueries": [
            "How to deploy a LEMP stack with WordPress on a Linux VM in Azure?",
            "How to set up a WordPress site using LEMP stack on Azure?",
            "Instructions for installing LEMP stack and WordPress on Azure virtual machines"
        ],
        "sourceType": "ExecDocs",
        "keyFeatures": [
            "Deploy NGINX web server on Ubuntu VM",
            "Install and configure Azure MySQL Flexible Server",
            "Setup PHP environment and install WordPress",
            "Open ports 80 and 443 for web traffic",
            "Enable SSL for WordPress site using certbot",
            "Use Azure CLI and Azure Cloud Shell for management"
        ],
        "tech": [
            "Nginx",
            "Php",
            "Mysql",
            "Ubuntu",
            "Linux",
            "Wordpress"
        ]
    },
    {
        "title": "Deploy Inspektor Gadget in an Azure Kubernetes Service cluster",
        "description": "This tutorial shows how to deploy Inspektor Gadget in an AKS cluster",
        "author": "Microsoft",
        "source": "https://raw.githubusercontent.com/MicrosoftDocs/executable-docs/main/scenarios/DeployIGonAKS/README.md",
        "tags": [
            "tutorial",
            "inspektor",
            "gadget",
            "aks",
            "cluster",
            "deployment",
            "kubernetes",
            "setup",
            "install",
            "monitoring"
        ],
        "id": "cf9941e7-df14-400d-86a3-4ef82f016d05",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {
            "execDocs": {
                "path": "DeployIGonAKS%2FREADME.md"
            }
        },
        "products": [
            "Azure Kubernetes Service"
        ],
        "sampleQueries": [
            "How to deploy Inspektor Gadget on an Azure Kubernetes Service cluster?",
            "What are the steps to set up Inspektor Gadget for monitoring in AKS?",
            "Can I install Inspektor Gadget in my AKS cluster for better deployment insights?"
        ],
        "sourceType": "ExecDocs",
        "tech": [
            "Bash"
        ],
        "keyFeatures": [
            "Deploy Inspektor Gadget in AKS cluster",
            "Use Azure CLI for deployment",
            "Define environment variables for setup",
            "Create resource group and AKS cluster",
            "Install and use kubectl for Kubernetes management",
            "Install Inspektor Gadget plugin and deploy in cluster",
            "Configure credentials for cluster access",
            "Monitor cluster with Inspektor Gadget"
        ]
    },
    {
        "title": "Deploy a Scalable & Secure Azure Kubernetes Service cluster using the Azure CLI",
        "description": "This tutorial where we will take you step by step in creating an Azure Kubernetes Web Application that is secured via https.",
        "author": "Microsoft",
        "source": "https://raw.githubusercontent.com/MicrosoftDocs/executable-docs/main/scenarios/CreateAKSWebApp/README.md",
        "tags": [
            "tutorial",
            "azure",
            "kubernetes",
            "web",
            "application",
            "HTTPS",
            "secure",
            "deployment",
            "setup",
            "step-by-step",
            "one click"
        ],
        "id": "dc1f07b7-6a62-42d8-b683-6d666f56dd64",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {
            "execDocs": {
                "path": "CreateAKSWebApp%2FREADME.md"
            }
        },
        "products": [
            "Azure Kubernetes Service",
            "Azure CLI"
        ],
        "sampleQueries": [
            "How can I deploy a secure HTTPS web application with Azure Kubernetes Service?",
            "Is there a step-by-step tutorial for setting up a scalable Kubernetes cluster in Azure?",
            "What is the process for deploying a web application on Azure Kubernetes Service with security features?"
        ],
        "sourceType": "ExecDocs",
        "tech": [
            "Kubernetes",
            "Helm",
            "Nginx",
            "Python",
            "YAML",
            "Redis",
            "Linux",
            "RabbitMQ",
            "Vue"
        ],
        "keyFeatures": [
            "Step-by-step tutorial for creating a secure web application",
            "Deploy scalable Azure Kubernetes Service (AKS) cluster",
            "HTTPS secured AKS deployment",
            "Use Helm to install NGINX Ingress Controller",
            "Automate SSL certificate management with Cert Manager",
            "Deploy microservices using Kubernetes manifests",
            "Use Kubernetes for container orchestration",
            "Enable AKS cluster autoscaling and Container insights"
        ]
    },
    {
        "title": "Quickstart: Use the Azure CLI to create a Red Hat Enterprise Linux Virtual Machine",
        "description": "In this quickstart, you learn how to use the Azure CLI to create a Red Hat Enterprise Linux virtual machine",
        "author": "Microsoft",
        "source": "https://raw.githubusercontent.com/MicrosoftDocs/executable-docs/main/scenarios/CreateRHELVMAndSSH/create-rhel-vm-ssh.md",
        "tags": [
            "azure",
            "azure-cli",
            "linux",
            "vm",
            "rhel",
            "virtual-machines"
        ],
        "id": "ccf4ac9f-a38c-42fb-bfa7-149cf6118299",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {
            "execDocs": {
                "path": "CreateRHELVMAndSSH%2Fcreate-rhel-vm-ssh.md"
            }
        },
        "products": [
            "Azure CLI",
            "Azure Virtual Machines",
            "Azure AD"
        ],
        "sampleQueries": [
            "How to use Azure CLI to create a Red Hat Enterprise Linux VM",
            "Can I create a Red Hat Enterprise Linux virtual machine on Azure using Azure CLI?",
            "Steps to deploy a Red Hat Enterprise Linux VM with Azure CLI"
        ],
        "sourceType": "ExecDocs",
        "tech": [
            "Linux"
        ],
        "keyFeatures": [
            "Use Azure CLI to manage resources",
            "Deploy Red Hat Enterprise Linux VM",
            "Launch Azure Cloud Shell for interactive CLI",
            "Define and use environment variables",
            "Enable Azure AD Login for Linux VMs",
            "SSH into virtual machine"
        ]
    },
    {
        "title": "Quickstart: Use the Azure CLI to create an Ubuntu Virtual Machine and attach an Azure Data Disk",
        "description": "In this quickstart, you learn how to use the Azure CLI to create an Ubuntu Linux virtual machine",
        "author": "Microsoft",
        "source": "https://raw.githubusercontent.com/MicrosoftDocs/executable-docs/main/scenarios/AttachDataDiskLinuxVM/attach-data-disk-linux-vm.md",
        "tags": [
            "azurecli",
            "azure",
            "ubuntu",
            "linux",
            "virtualmachine",
            "quickstart",
            "cli"
        ],
        "id": "066015b1-bc26-41b2-828b-edc5d3380598",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {
            "execDocs": {
                "path": "AttachDataDiskLinuxVM%2Fattach-data-disk-linux-vm.md"
            }
        },
        "products": [
            "Azure CLI",
            "Azure Virtual Machines",
            "Azure Active Directory"
        ],
        "sampleQueries": [
            "How to create an Ubuntu Linux VM using Azure CLI?",
            "How to attach a data disk to an Ubuntu VM in Azure?",
            "Steps to set up and manage an Ubuntu Linux virtual machine on Azure with the CLI"
        ],
        "sourceType": "ExecDocs",
        "tech": [
            "Bash",
            "Ubuntu",
            "Linux"
        ],
        "keyFeatures": [
            "Use Azure CLI to create and manage Azure resources",
            "Create an Ubuntu Linux virtual machine in Azure",
            "Attach and manage Azure Data Disks",
            "Azure Active Directory authentication for Linux VMs",
            "Use of Azure Cloud Shell",
            "SSH into the Linux VM using Azure AD",
            "Attach new or existing data disks to VMs",
            "Commands to format and mount data disks"
        ]
    },
    {
        "title": "Quickstart: Deploy a Postgres vector database",
        "description": "Setup a Postgres vector database and openai resources to run a RAG-LLM model",
        "author": "Microsoft",
        "source": "https://raw.githubusercontent.com/aamini7/postgres-rag-llm-demo/main/README.md",
        "tags": [
            "postgresql",
            "openai",
            "vector",
            "rag-llm",
            "azure",
            "linux",
            "cli",
            "quickstart"
        ],
        "id": "ea616bbc-2f3d-42e6-bb9e-5630da8a13be",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {
            "execDocs": {
                "path": "PostgresRagLlmDemo%2FREADME.md"
            }
        },
        "products": [
            "Azure Database for PostgreSQL",
            "Azure Cognitive Services"
        ],
        "sampleQueries": [
            "How to deploy a Postgres vector database and integrate it with OpenAI on Azure?",
            "What is the process to set up a RAG-LLM model using a Postgres vector database?",
            "Can I use Azure CLI to create a Postgres vector database and deploy OpenAI resources?"
        ],
        "sourceType": "ExecDocs",
        "tech": [
            "Linux",
            "Postgresql",
            "Python"
        ],
        "keyFeatures": [
            "Setup a Postgres vector database on Azure",
            "Deploy Linux virtual machine using Azure CLI",
            "Integrate and set up OpenAI resources",
            "Run a RAG-LLM model",
            "Create and manage Azure resources via command line",
            "Install and configure required Python dependencies",
            "Clone and run chatbot code from repository"
        ]
    },
    {
        "title": "Deploy an AI model on Azure Kubernetes Service (AKS) with the AI toolchain operator (preview)",
        "description": "Learn how to enable the AI toolchain operator add-on on Azure Kubernetes Service (AKS) to simplify OSS AI model management and deployment.",
        "author": "Microsoft",
        "source": "https://raw.githubusercontent.com/MicrosoftDocs/azure-aks-docs/refs/heads/main/articles/aks/ai-toolchain-operator.md",
        "tags": [
            "aks",
            "azure",
            "CLI",
            "kubernetes",
            "AI",
            "model",
            "deployment",
            "gpu"
        ],
        "id": "17223c72-b8e2-4e73-810f-230504f8796b",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {
            "execDocs": {
                "path": "AksKaito%2FREADME.md"
            }
        },
        "products": [
            "Azure Kubernetes Service (AKS)",
            "Azure CLI"
        ],
        "sampleQueries": [
            "How to deploy AI models on Azure Kubernetes Service using the AI toolchain operator?",
            "Can I use Azure AI toolchain operator to manage OSS AI models on my AKS cluster?",
            "How to enable GPU nodes for AI model deployment on AKS with the AI toolchain operator?"
        ],
        "sourceType": "ExecDocs",
        "tech": [
            "Kubernetes"
        ],
        "keyFeatures": [
            "Managed add-on for AKS",
            "Simplifies OSS AI model management and deployment",
            "Automatic provisioning of GPU nodes",
            "Sets up inference server as an endpoint",
            "Reduces onboarding time for AI model usage and development"
        ]
    },
    {
        "title": "Azure OpenAI RAG Chat Experience with Node.js",
        "description": "This sample shows how to build an AI chat experience with Retrieval-Augmented Generation (RAG) using LangChain4J and OpenAI language models. The application is hosted on Azure Static Web Apps and Azure Container Apps, with Azure AI Search as the vector database. You can use it as a starting point for building more complex AI applications.",
        "author": "Microsoft",
        "source": "https://github.com/Azure-Samples/azure-openai-rag-workshop",
        "tags": [
            "openAI",
            "rag",
            "azure",
            "nodejs",
            "langchain",
            "app",
            "chat",
            "search",
            "ai",
            "model"
        ],
        "id": "7ea19a29-b97a-47e9-b5b8-3e974d77db88",
        "deploymentOptions": [],
        "deploymentConfig": {},
        "products": [
            "Azure Static Web Apps",
            "Azure Container Apps",
            "Azure AI Search"
        ],
        "sampleQueries": [
            "How can I create an AI chat application using Node.js and OpenAI on Azure?",
            "What is the Retrieval-Augmented Generation pattern and how can it be implemented in Azure with LangChain4J?",
            "Can Azure Static Web Apps host applications with AI language models and Azure AI Search?"
        ],
        "sourceType": "AzureSamples",
        "tech": [
            "Node.js",
            "LangChain.js",
            "TypeScript"
        ],
        "keyFeatures": [
            "AI chat experience",
            "Retrieval-Augmented Generation (RAG)",
            "LangChain4J",
            "OpenAI language models",
            "Azure Static Web Apps",
            "Azure Container Apps",
            "Azure AI Search",
            "Fastify",
            "Node.js service",
            "Monorepo structure",
            "GitHub Codespaces integration",
            "Docker and Dev Containers support",
            "Azure prerequisites",
            "Azure account permissions",
            "Easy deployment with Azure CLI",
            "Clean up with Azure CLI",
            "Other versions available with different configurations",
            "Microsoft Open Source Code of Conduct",
            "Contributor License Agreement (CLA)",
            "Trademarks and usage policies"
        ]
    },
    {
        "title": "Serverless ChatGPT with RAG using LangChain.js",
        "description": "A Serverless ChatGPT-like experience with Retrieval-Augmented Generation using LangChain.js, TypeScript and Azure",
        "author": "Glaucia Lemos, Yohan Lasorsa",
        "source": "https://github.com/Azure-Samples/serverless-chat-langchainjs",
        "tags": [
            "ai",
            "bicep",
            "gpt",
            "serverlessapi",
            "javascript",
            "nodejs",
            "openai",
            "typescript",
            "webcomponents",
            "cosmosdb",
            "msft",
            "langchain",
            "functions",
            "swa",
            "azureai",
            "aicollection",
            "rag"
        ],
        "id": "ff16119d-5fa9-4011-b0f3-62ef2b71650f",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Static Web Apps",
            "Azure Functions",
            "Azure Cosmos DB",
            "Azure Blob Storage"
        ],
        "sampleQueries": [
            "How to create a serverless AI chat application on Azure using LangChain.js",
            "What is the process to set up Retrieval-Augmented Generation for a chat application in Azure?",
            "Can LangChain.js be used to integrate Azure AI Search in an AI chat app hosted on Azure Static Web Apps?"
        ],
        "sourceType": "Azd",
        "tech": [
            "JavaScript",
            "TypeScript",
            "Node.js",
            "AzureFunctions",
            "AzureCosmosDB",
            "LangChain.js"
        ],
        "keyFeatures": [
            "Serverless Architecture",
            "Utilizes Azure Functions and Azure Static Web Apps for a fully serverless deployment",
            "Retrieval-Augmented Generation (RAG)",
            "Combines the power of Azure Cosmos DB and LangChain.js to provide relevant and accurate responses",
            "Scalable and Cost-Effective",
            "Leverages Azure's serverless offerings to provide a scalable and cost-effective solution",
            "Local Development",
            "Supports local development using Ollama for testing without any cloud costs"
        ]
    },
    {
        "title": "Use Key Vault from App Service with Azure Managed Identity",
        "description": "This sample shows how to use Azure KeyVault from App Service with Azure Managed Identity.",
        "author": "Microsoft",
        "source": "https://github.com/Azure-Samples/app-service-msi-keyvault-dotnet",
        "tags": [
            "key",
            "vault",
            "appservice",
            "azure",
            "identity",
            "dotnet",
            "azure",
            "msi"
        ],
        "id": "7215fa5f-57b0-4b7e-a347-cd07c2fc2fd1",
        "deploymentOptions": [],
        "deploymentConfig": {},
        "products": [
            "Azure Key Vault",
            "Azure App Service",
            "Azure Managed Identity"
        ],
        "sampleQueries": [
            "How can I access Azure Key Vault from an App Service using Managed Identity?",
            "Is there a sample for integrating Azure Key Vault with Azure App Service in .NET?",
            "What's the process to set up Azure Managed Identity for accessing Key Vault from App Service?"
        ],
        "sourceType": "AzureSamples",
        "tech": [
            "Dotnet"
        ],
        "keyFeatures": [
            "Use Azure KeyVault",
            "App Service",
            "Azure Managed Identity",
            "Integration with .NET applications"
        ]
    },
    {
        "title": "ASP.NET sample for Azure App Service",
        "description": "This is an ASP.NET MVC web app that you can deploy to Azure App Service using Git.",
        "author": "Microsoft",
        "source": "https://github.com/Azure-Samples/app-service-web-dotnet-get-started",
        "tags": [
            "dotnet",
            "azure",
            "appservice",
            "git",
            "web",
            "app",
            "mvc",
            "aspnet"
        ],
        "id": "9b718fe5-05b1-4444-96be-7e5706f876d7",
        "deploymentOptions": [],
        "deploymentConfig": {},
        "products": [
            "Azure App Service"
        ],
        "sampleQueries": [
            "How do I deploy an ASP.NET MVC web app to Azure App Service using Git?",
            "What is a good ASP.NET sample for starting a web app on Azure?",
            "Are there any AzureSamples for building an ASP.NET app with Azure App Service?"
        ],
        "sourceType": "AzureSamples",
        "tech": [
            "ASP.NET",
            "C#"
        ],
        "keyFeatures": [
            "ASP.NET MVC web app",
            "Deploy to Azure App Service using Git",
            "Default MVC app generated by Visual Studio",
            "Quick deployment guide available",
            "Azure App Service integration"
        ]
    },
    {
        "title": "Azure AI Search Comparison Tool",
        "description": "This repository contains a React application that demonstrates the Azure AI Search Comparison Tool. This tool provides a web interface for visualizing different retrieval modes available in Azure AI Search. Additionally, the tool supports image search using text-to-image and image-to-image search functionalities. It leverages Azure OpenAI for text embeddings and Azure AI Vision API for image embeddings.",
        "author": "Microsoft",
        "source": "https://github.com/Azure-Samples/azure-search-comparison-tool",
        "tags": [
            "azure",
            "ai",
            "search",
            "react",
            "app",
            "web",
            "openAI",
            "image-to-image",
            "text-to-image",
            "retrieval"
        ],
        "id": "a470d1ed-7e75-421b-8794-9c6165b73c79",
        "deploymentOptions": [],
        "deploymentConfig": {},
        "products": [
            "Azure Cognitive Search",
            "Azure OpenAI Service",
            "Azure Computer Vision"
        ],
        "sampleQueries": [
            "How can I visualize different search retrieval modes with Azure AI Search?",
            "What is the Azure AI Search Comparison Tool and how does it support image search?",
            "How to implement text-to-image and image-to-image search with Azure OpenAI?"
        ],
        "sourceType": "AzureSamples",
        "tech": [
            "React",
            "Node.js",
            "Python",
            "JavaScript"
        ],
        "keyFeatures": [
            "React application for Azure AI Search",
            "Web interface for visualizing retrieval modes",
            "Supports image search using text-to-image and image-to-image functionalities",
            "Leverages Azure OpenAI for text embeddings",
            "Uses Azure AI Vision API for image embeddings",
            "Generate text embeddings and insert into a vector store in Azure AI Search",
            "Perform vector search queries on text data",
            "Vector searches with metadata filtering",
            "Hybrid search (text + vectors)",
            "Text-to-image vector searches",
            "Image-to-image vector searches"
        ]
    },
    {
        "title": "Azure OpenAI Chat Frontend",
        "description": "Features a Chat-GPT-like user interface, including additional capabilities to debug responses, restyle, revisit history and reset the chat.",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure-Samples/azure-openai-chat-frontend",
        "tags": [
            "javascript",
            "typescript",
            "aicollection",
            "openai",
            "blobstorage",
            "aisearch",
            "msft"
        ],
        "id": "8a8499b2-ad33-4e73-846d-5715aed9f8f7",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure OpenAI"
        ],
        "sampleQueries": [
            "How can I implement a chat UI with LitElement to interact with Azure OpenAI?",
            "What is involved in setting up a frontend for Azure OpenAI using TypeScript and Vite?",
            "Can I create a chat interface using Azure's OpenAI API with the Lit framework?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Lit",
            "LitElement",
            "TypeScript",
            "Vite",
            "Rollup",
            "ESLint",
            "Prettier"
        ],
        "keyFeatures": [
            "Classic Chat UI for interacting with Azure OpenAI API",
            "Implemented with Lit and LitElement",
            "Supports sending messages to and receiving responses from the OpenAI API",
            "Configurable styles and prompts",
            "Supports revisiting history and resetting the chat",
            "Debugging capabilities for responses",
            "Local and container-based deployment options",
            "Uses technologies like Vite, Rollup, TypeScript, ESLint, Prettier",
            "Supports using the module as a library",
            "Supports multiple backend implementations",
            "Instructions for connecting to deployed backend services",
            "Security considerations for deployment in Azure Static Web Apps",
            "Guidance for deploying with Azure Developer CLI or Azure Static Web Apps CLI",
            "Customizable texts and labels via global configuration file"
        ]
    },
    {
        "title": "Azure AI Studio Starter",
        "description": "Bicep template that deploys everything you need to get started with Azure AI Studio.  Includes AI Hub with dependent resources, AI project, AI Services and an online endpoint",
        "author": "Azure Dev",
        "source": "https://github.com/Azure-Samples/azd-aistudio-starter",
        "tags": [
            "bicep",
            "ai",
            "azureai",
            "openai",
            "msft"
        ],
        "id": "3b2621a8-62cf-418c-9811-916dae3df1d4",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Machine Learning",
            "Azure OpenAI",
            "Azure Cognitive Search",
            "Azure Storage",
            "Azure Key Vault",
            "Azure Application Insights",
            "Azure Container Registry",
            "Azure Log Analytics"
        ],
        "sampleQueries": [
            "What is the Azure AI Studio Starter Template and how do I use it?",
            "How can I set up an AI project in Azure AI Studio using the AzD template?",
            "Can I integrate OpenAI services with Azure Cognitive Search using the Azure AI Studio Starter Template?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep"
        ],
        "keyFeatures": [
            "Creates an Azure AI Studio hub",
            "Creates AI projects",
            "Includes Azure OpenAI Service",
            "Creates Online Endpoint",
            "Includes AI Search Service (Optional, enabled by default)",
            "Deploys specified models within infra/ai.yaml",
            "Creates Storage Account",
            "Creates Key Vault",
            "Includes Application Insights (Optional, enabled by default)",
            "Creates Container Registry (Optional, enabled by default)",
            "Configurable options for disabling AI Search, Application Insights, and Container Registry",
            "Override default naming conventions for resources"
        ]
    },
    {
        "title": "Contoso Chat Retail with Azure AI Studio and Promptflow",
        "description": "This sample has the full End2End process of creating RAG application with Prompt Flow and AI Studio. It includes GPT 3.5 Turbo LLM application code, evaluations, deployment automation with AZD CLI, GitHub actions for evaluation and deployment and intent mapping for multiple LLM task mapping.",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure-Samples/contoso-chat",
        "tags": [
            "msft",
            "aicollection",
            "python",
            "openai",
            "aistudio",
            "bicep",
            "cosmosdb",
            "aisearch",
            "ai",
            "rag"
        ],
        "id": "892c1998-ab31-4592-a453-8c8ec947df6a",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure OpenAI",
            "Azure AI Search",
            "Azure Cosmos DB",
            "Azure Container Apps"
        ],
        "sampleQueries": [
            "How can I set up a chatbot for Contoso using Azure AI and Promptflow?",
            "What is the way to use Cosmos DB for product recommendations in Azure AI chatbots?",
            "Can I deploy a retrieval-augmented generation pattern on Azure for customer support?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Python",
            "Bicep",
            "Prompty"
        ],
        "keyFeatures": [
            "Azure OpenAI for embeddings, chat, and evaluation models",
            "Prompty for creating and managing prompts for rapid ideation",
            "Azure AI Search for performing semantic similarity search",
            "Azure CosmosDB for storing customer orders in a noSQL database",
            "Azure Container Apps for hosting the chat AI endpoint on Azure",
            "Sample product and customer data for rapid prototyping",
            "Sample application code for chat and evaluation workflows",
            "Sample datasets and custom evaluators using prompty assets",
            "AI-assisted evaluation flows for chat response quality",
            "Provision and deploy the solution using the Azure Developer CLI",
            "Support for Responsible AI practices with content safety and assessments"
        ]
    },
    {
        "title": "HTML sample for Azure App Service",
        "description": "This is a simple HTML/CSS/JS web app that can be deployed to Azure App Service using Git. It is built on the Carousel template by Bootstrap.",
        "author": "Microsoft",
        "source": "https://github.com/Azure-Samples/app-service-web-html-get-started",
        "tags": [
            "javascript",
            "azure",
            "app-service",
            "html",
            "web-app",
            "css",
            "git",
            "bootstrap"
        ],
        "id": "92455774-ab16-49b7-968c-e5963cbe880d",
        "deploymentOptions": [],
        "deploymentConfig": {},
        "products": [
            "Azure App Service"
        ],
        "sampleQueries": [
            "How do I deploy a simple HTML/CSS/JS web app to Azure App Service?",
            "Where can I find a Bootstrap Carousel template-based web app for Azure?",
            "What steps are needed to use Git for deploying a web app to Azure App Service?"
        ],
        "sourceType": "AzureSamples",
        "tech": [
            "Javascript",
            "HTML",
            "CSS",
            "Bootstrap"
        ],
        "keyFeatures": [
            "simple HTML/CSS/JS web app",
            "deployable to Azure App Service using Git",
            "built on Carousel template by Bootstrap",
            "JavaScript support",
            "HTML support",
            "CSS support",
            "integration with Azure",
            "web app functionality",
            "Git integration",
            "Bootstrap template usage"
        ]
    },
    {
        "title": "SAP Deployment Automation Framework",
        "description": "The SAP deployment automation framework on Azure is an open-source orchestration tool for deploying, installing and maintaining SAP environments. You can create infrastructure for SAP landscapes based on SAP HANA and NetWeaver with AnyDB on any of the SAP-supported operating system versions and deploy them into any Azure region. The framework uses Terraform for infrastructure deployment, and Ansible for the operating system and application configuration.",
        "author": "Microsoft",
        "source": "https://github.com/Azure/sap-automation",
        "tags": [
            "SAP",
            "azure",
            "terraform",
            "ansible",
            "deploy",
            "db",
            "automation",
            "framework"
        ],
        "id": "42ed645b-37f7-4468-95f4-ca5a515b63e5",
        "deploymentOptions": [
            "terraform"
        ],
        "deploymentConfig": {},
        "products": [],
        "sampleQueries": [
            "How can I automate the deployment of SAP HANA using the SAP Deployment Automation Framework on Azure?",
            "What tools are involved in setting up an automated SAP environment on Azure?",
            "Does the SAP Deployment Automation Framework support AnyDB with Terraform and Ansible?"
        ],
        "sourceType": "AzureSamples",
        "tech": [
            "Terraform",
            "Ansible"
        ],
        "keyFeatures": [
            "open-source orchestration tool for SAP environments",
            "deploying, installing and maintaining SAP environments",
            "create infrastructure for SAP landscapes",
            "supports SAP HANA and NetWeaver with AnyDB",
            "compatible with all SAP-supported operating system versions",
            "deployable in any Azure region",
            "uses Terraform for infrastructure deployment",
            "uses Ansible for OS and application configuration",
            "partnership with SUSE and Red Hat"
        ]
    },
    {
        "title": "Azure AI Starter",
        "description": "Bicep template that deploys Azure AI services with configured machine learning models.",
        "author": "Azure Dev",
        "source": "https://github.com/Azure-Samples/azd-ai-starter",
        "tags": [
            "bicep",
            "ai",
            "azureai",
            "openai",
            "msft"
        ],
        "id": "51b84127-0563-45c3-b2d2-03a66433ca70",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure AI"
        ],
        "sampleQueries": [
            "How can I deploy Azure AI services with pre-configured machine learning models?",
            "What is the Azure AI Starter and how does it use Bicep templates?",
            "Can I find a GitHub repository that helps me quickly start with Azure AI using OpenAI models?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep"
        ],
        "keyFeatures": [
            "Deploys Azure AI services",
            "Configured machine learning models",
            "Uses Bicep templates",
            "Supports GitHub Codespaces",
            "VS Code Dev Containers integration",
            "Quickstart instructions available",
            "Supports local environment setup",
            "Extending Bicep IaC files",
            "Region availability guidance",
            "Quota check scripts",
            "Cost estimation with Azure's pricing calculator",
            "Managed Identity or Key Vault integration",
            "Security scanning with GitHub Action tool"
        ]
    },
    {
        "title": "Simple Chat Application using Azure OpenAI (Python)",
        "description": "Build a chat application using Azure OpenAI GPT models.",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure-Samples/openai-chat-app-quickstart",
        "tags": [
            "msft",
            "aicollection",
            "python",
            "openai",
            "aca",
            "bicep",
            "ai"
        ],
        "id": "8e07cf1a-0aba-41b2-9595-ce1ff8b2f167",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure OpenAI",
            "Azure Container Apps",
            "Azure Container Registry",
            "Azure Log Analytics"
        ],
        "sampleQueries": [
            "How do I create a chat application using Azure OpenAI in Python?",
            "What are the steps to set up a simple chat application with Azure OpenAI SDK?",
            "Can I use Bicep templates for deploying an Azure Chat Application with OpenAI integration?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Python",
            "Quart",
            "Bicep",
            "OpenAI"
        ],
        "keyFeatures": [
            "Python app using Azure OpenAI to generate responses to user messages",
            "Provisioning Azure OpenAI resources and deploying the app to Azure Container Apps using Azure Developer CLI",
            "Managed identity for authenticating with Azure OpenAI",
            "Uses Quart framework and openai package for backend functionality",
            "Includes a basic HTML/JS frontend that streams responses using JSON Lines over a ReadableStream",
            "Bicep files for provisioning various Azure resources",
            "Support for GitHub Codespaces and VS Code Dev Containers for development",
            "Deployment guidance with Azure account setup and azd command",
            "Continuous deployment setup with GitHub Actions",
            "Cost management and security guidelines included"
        ]
    },
    {
        "title": "RAG on PostgreSQL",
        "description": "A RAG app to ask questions about rows in a database table. Deployable on Azure Container Apps with PostgreSQL Flexible Server.",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure-Samples/rag-postgres-openai-python",
        "tags": [
            "msft",
            "aicollection",
            "python",
            "openai",
            "aca",
            "bicep",
            "ai",
            "azuredb-postgreSQL",
            "rag"
        ],
        "id": "7fce9298-6849-439b-9080-7901412ac48e",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Container Apps",
            "Azure Database for PostgreSQL",
            "Azure OpenAI",
            "Azure Monitor"
        ],
        "sampleQueries": [
            "How to set up RAG with PostgreSQL on Azure Container Apps?",
            "What is the Azure database for PostgreSQL Flexible Server used for in the RAG app?",
            "Can I use the RAG app to perform question-answering with data from a PostgreSQL database table?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Python",
            "FastAPI",
            "React",
            "FluentUI",
            "PostgreSQL",
            "Bicep"
        ],
        "keyFeatures": [
            "Hybrid search on the PostgreSQL database table using the pgvector extension for vector search and full text search, combined using RRF (Reciprocal Rank Fusion)",
            "OpenAI function calling to convert user queries into query filter conditions",
            "Conversion of user queries into vectors using the OpenAI embedding API",
            "Web-based chat application with an API backend using OpenAI chat models to answer questions about rows in a PostgreSQL database table",
            "Frontend built with React and FluentUI",
            "Backend written with Python and FastAPI",
            "Deployment to Azure using the Azure Developer CLI",
            "Hosting on Azure Container Apps",
            "Database on Azure PostgreSQL Flexible Server",
            "Models on Azure OpenAI",
            "User-assigned managed identity authentication to Azure services",
            "Logging to Azure Log Analytics",
            "Supports GitHub Codespaces and VS Code Dev Containers for development"
        ]
    },
    {
        "title": "Creative Writing Assistant: Working with Agents using Promptflow (Python Implementation)",
        "description": "A creative writing multi-agent solution to help users write articles.",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure-Samples/agent-openai-python-prompty",
        "tags": [
            "msft",
            "aicollection",
            "python",
            "openai",
            "aks",
            "terraform",
            "ai",
            "aisearch"
        ],
        "id": "eac0f912-29ba-40fc-8d1b-2e495fc94abd",
        "deploymentOptions": [
            "azcli",
            "terraform"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Kubernetes Service",
            "Azure Cognitive Search"
        ],
        "sampleQueries": [
            "How can I implement a creative writing assistant with Python and OpenAI?",
            "What is Promptflow and how is it used for creative writing solutions?",
            "Can I deploy a multi-agent creative writing system on AKS using Terraform?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Python",
            "Bicep",
            "Terraform",
            "JavaScript",
            "Typescript"
        ],
        "keyFeatures": [
            "Azure OpenAI to drive various agents",
            "Prompty to create, manage, and evaluate the prompt into the code",
            "Bing Search API to research the provided topic",
            "Azure AI Search for performing semantic similarity search",
            "FastAPI app for taking topic and instruction from user",
            "Research agent using Bing Search API",
            "Product agent using Azure AI Search",
            "Writer agent to combine research and product information",
            "Editor agent to refine the article"
        ]
    },
    {
        "title": "Process Automation: Speech to Text and Summarization with AI Studio",
        "description": "This solution converts speech to text and then processes and summarizes the text based on the prompt scenario.",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure-Samples/summarization-openai-python-promptflow",
        "tags": [
            "msft",
            "aicollection",
            "python",
            "openai",
            "aca",
            "bicep",
            "ai",
            "speechservice"
        ],
        "id": "abb9e776-88e4-4519-9d59-73bccf78f635",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure AI Speech Service",
            "Azure OpenAI"
        ],
        "sampleQueries": [
            "How to automate speech to text conversion using AI Studio on Azure",
            "What is the process for summarizing text with Azure's AI services?",
            "Can I use Azure for processing and summarizing audio recordings with AI?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Python"
        ],
        "keyFeatures": [
            "Web-based app for reporting issues via text or speech",
            "Uses Azure AI Speech Service to translate speech into text",
            "Employs Azure OpenAI to summarize text",
            "Leverages Prompty and Prompt Flow for managing and evaluating prompts",
            "Supports GitHub Codespaces and VS Code Dev Containers for setup",
            "Includes sample data for testing (audio and text input)",
            "Managed Identity for Azure service authentication",
            "GitHub Action for security scanning of infrastructure-as-code files"
        ]
    },
    {
        "title": "Function Calling with Prompty, LangChain and Elastic Search",
        "description": "Function calling for vector database lookup based on user question.",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure-Samples/agent-python-openai-prompty-langchain",
        "tags": [
            "msft",
            "aicollection",
            "python",
            "openai",
            "aistudio",
            "bicep",
            "ai"
        ],
        "id": "b2aa83fb-7911-4f5f-bf5f-4f429ca1d67d",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure OpenAI",
            "Azure Key Vault"
        ],
        "sampleQueries": [
            "How do I use Prompty and LangChain for function calling in Elastic Search?",
            "Can I integrate OpenAI with Elastic Search for automated function calling?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Python",
            "Elasticsearch",
            "Bicep"
        ],
        "keyFeatures": [
            "Integration of Prompty, LangChain, and Elasticsearch",
            "Retrieval-Augmented Generation (RAG) technology",
            "Azure AI Studio integration",
            "Agent capable of handling user questions and performing searches",
            "Local data storage folder",
            "Built-in evaluations with telemetry pushed to Azure AI Studio",
            "Supports GitHub Codespaces and VS Code Dev Containers",
            "Compatible with multiple Python versions",
            "Requires Azure and Elasticsearch accounts",
            "Environment variables setup for configuration",
            "Local development and deployment capabilities",
            "CI/CD pipeline setup with azd",
            "Cost estimation via Azure's pricing calculator",
            "Uses keyless authentication whenever possible",
            "Langsmith support for further development"
        ]
    },
    {
        "title": "Function Calling with Prompty, LangChain and Pinecone",
        "description": "Function calling for vector database lookup based on user question.",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure-Samples/agent-openai-python-prompty-langchain-pinecone",
        "tags": [
            "msft",
            "aicollection",
            "python",
            "openai",
            "aistudio",
            "bicep",
            "ai",
            "pinecone"
        ],
        "id": "283300a7-84d2-4768-9c38-27eb6eac18bd",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure OpenAI",
            "Azure Key Vault",
            "Azure Machine Learning"
        ],
        "sampleQueries": [
            "How do I use Prompty and LangChain to look up information in a vector database with Pinecone?",
            "Can I integrate OpenAI with Pinecone to create vector-based database lookups?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Python",
            "Bicep"
        ],
        "keyFeatures": [
            "Uses Azure's Prompty tool, Langchain, and Pinecone to build a large language model (LLM) search agent",
            "Leverages Retrieval-Augmented Generation (RAG) to enhance response capabilities",
            "Includes a `agent.py` file to generate queries and perform searches using Elasticsearch",
            "Stores local data in a `data` folder with index creation during initialization",
            "Built-in evaluations to test Prompt Flow with telemetry pushed to Azure AI Studio",
            "Runs with Azure AI Studio",
            "Supports deployment with GitHub Codespaces and VS Code Dev Containers",
            "Can be set up locally or with GitHub Codespaces",
            "Requires Azure account with specific permissions",
            "Requires Pinecone account and API key",
            "Supports CI/CD setup with `azd pipeline config`",
            "Includes instructions for running the app locally with necessary dependencies",
            "Provides architecture diagram and project setup guidance",
            "Supports cleaning up resources with `azd down` command",
            "Includes cost estimation guidance using Azure's pricing calculator",
            "Supports keyless authentication with managed identities",
            "Integrates with Langsmith"
        ]
    },
    {
        "title": "API Center Analyzer",
        "description": "This sample provides an Azure API Center along with Azure Functions and Azure Event Grid to analyze API specs when registering or updating API specs to Azure API Center.",
        "author": "Justin Yoo, Pierce Boggan",
        "source": "https://github.com/Azure/APICenter-Analyzer",
        "tags": [
            "msft",
            "bicep",
            "apicenter",
            "functions",
            "eventgrid",
            "managedidentity",
            "appinsights",
            "loganalytics",
            "diagnosticsettings",
            "typescript"
        ],
        "id": "69c72097-2d94-4ce6-84f6-39660e086d6a",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure API Management",
            "Azure Functions",
            "Azure Event Grid",
            "Azure Managed Identity",
            "Azure Application Insights",
            "Azure Log Analytics"
        ],
        "sampleQueries": [
            "How can I use Azure Functions and Event Grid to analyze API specs with Azure API Center?",
            "What's the process for setting up API spec analysis in Azure using the API Center Analyzer sample?",
            "Can I automatically track and diagnose my API spec updates with the API Center Analyzer on Azure?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "Typescript"
        ],
        "keyFeatures": [
            "Azure API Center",
            "Azure Functions",
            "Azure Event Grid",
            "API specs analysis",
            "Integration with Azure API Center",
            "Managed identity",
            "App Insights",
            "Log Analytics",
            "Diagnostic settings",
            "TypeScript support"
        ]
    },
    {
        "title": "API Center Portal",
        "description": "This sample provides an Azure API Center along with Azure Static Web Apps that governs API specs registered on Azure API Center for developers and stakeholders.",
        "author": "Justin Yoo, Pierce Boggan",
        "source": "https://github.com/Azure/APICenter-Portal-Starter",
        "tags": [
            "msft",
            "bicep",
            "apicenter",
            "swa",
            "serviceprincipal",
            "typescript"
        ],
        "id": "7a19b6ec-5aa0-424e-a00e-182ba93ef5d9",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure API Management",
            "Azure Static Web Apps"
        ],
        "sampleQueries": [
            "How can I use the Azure API Center with Static Web Apps for API governance?",
            "What's the process to register API specs on Azure API Center using TypeScript?",
            "Is there a sample Azure DevOps template for setting up an API portal with governance features?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "Typescript",
            "Node.js"
        ],
        "keyFeatures": [
            "Centralized API inventory management",
            "Web-based API discovery and consumption experience",
            "Support for multiple deployment options including Azure Static Web Apps and Azure App Service",
            "Framework for customer-managed API portals",
            "Customizable and extensible portal platform",
            "Scoping filter configuration for API display",
            "Automated deployment using Azure Developer CLI",
            "Manual deployment with step-by-step guidance",
            "CI/CD pipeline integration with GitHub Actions",
            "Local development setup instructions",
            "Prerequisites include Node.js, npm, and Vite package",
            "Telemetry and data collection with opt-out options",
            "Community contributions welcomed",
            "Microsoft Open Source Code of Conduct adherence",
            "Microsoft trademark and brand guidelines compliance"
        ]
    },
    {
        "title": "API Center Reference Sample",
        "description": "This sample provides an Azure API Center along with Azure App Service, Static Web Apps and Azure Functions that governs, analyzes and performs service discovery of API specs registered on Azure API Center.",
        "author": "Justin Yoo",
        "source": "https://github.com/Azure-Samples/APICenter-Reference",
        "tags": [
            "msft",
            "bicep",
            "apicenter",
            "appservice",
            "functions",
            "eventgrid",
            "managedidentity",
            "appinsights",
            "loganalytics",
            "diagnosticsettings",
            "swa",
            "serviceprincipal",
            "logicapps",
            "apim",
            "dotnetCsharp",
            "typescript"
        ],
        "id": "c6a63f43-1a2f-4e19-9af9-d28f2818da1d",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure API Management",
            "Azure App Service",
            "Azure Static Web Apps",
            "Azure Functions",
            "Azure Event Grid",
            "Azure Logic Apps",
            "Azure Managed Identity",
            "Azure Application Insights",
            "Azure Log Analytics"
        ],
        "sampleQueries": [
            "How can I set up an Azure API Center using Azure App Service and Azure Functions?",
            "Can you show me a reference example of integrating Static Web Apps with Azure Functions and App Service?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            ".NET",
            "C#",
            "Typescript",
            "Node.js",
            "JavaScript"
        ],
        "keyFeatures": [
            "API Inventory showcasing API Management integration",
            "Manual or GitHub Actions workflow-based API registration",
            "Shift-left API governance functionality in VS Code",
            "APIC Analyzer for server-side linting",
            "Custom metadata management",
            "Client SDK integration (.NET & JavaScript)",
            "Server app scaffolding preparation (.NET & JavaScript)",
            "API Center OSS portal management",
            "Azure App Service integration",
            "Azure Functions integration",
            "Azure Static Web Apps integration",
            "Service discovery of API specs registered on Azure API Center",
            "CI/CD pipeline integration with GitHub Actions",
            "Event handling through Azure Event Grid and Logic Apps"
        ]
    },
    {
        "title": "GPT Video Analysis-In-A-Box",
        "description": "The GPT Video Analysis in-a-Box project leverages Azure OpenAI GPT-4 Turbo with Vision and Azure Data Factory to provide a low-code solution for analyzing images and videos, making AI adoption simpler and more efficient. This solution, part of the AI-in-a-Box framework by Microsoft Customer Engineers and Architects, ensures quality, efficiency, and rapid deployment of AI and ML solutions across various industries.",
        "author": "AI-in-a-Box Team",
        "source": "https://github.com/Azure-Samples/gpt-video-analysis-in-a-box",
        "tags": [
            "msft",
            "openai",
            "bicep",
            "cosmosdb",
            "azuredatafactory",
            "blobstorage",
            "ai"
        ],
        "id": "8000f86e-cd2f-43e0-8441-5112c5c31120",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure OpenAI",
            "Azure Data Factory",
            "Azure Key Vault",
            "Azure Blob Storage",
            "Azure Cosmos DB",
            "Azure Computer Vision"
        ],
        "sampleQueries": [
            "How do I use Azure OpenAI GPT-4 to analyze videos and images?",
            "What is the GPT Video Analysis-In-A-Box project, and how does it simplify AI adoption?",
            "Can Azure Data Factory be integrated with AI for video and image analysis solutions?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "Powershell"
        ],
        "keyFeatures": [
            "Leverages Azure OpenAI GPT-4 Turbo with Vision",
            "Uses Azure Data Factory for orchestration",
            "Low-code solution for analyzing images and videos",
            "Part of AI-in-a-Box framework by Microsoft",
            "Rapid deployment and easy customization",
            "Examines vehicles for damage in videos and images",
            "Applicable for multiple industries like insurance, manufacturing, and retail",
            "Stores results in Azure Cosmos DB in JSON format",
            "Includes sample images, videos, and prompts",
            "Uses Managed Identities for secure integration",
            "Parameterization for reusable pipelines",
            "Provides a batch and real-time processing option",
            "Supports integration with various Azure services like Azure Key Vault, Azure Blob Storage, and Azure AI Vision",
            "Highly customizable with parameterization of prompts and system messages"
        ]
    },
    {
        "title": "Build a Copilot app using Azure Cosmos DB, Azure OpenAI Service and Azure App Service",
        "description": "Build a copilot application with Azure OpenAI Service, Azure Cosmos DB for NoSQL vector database & Azure App Service.",
        "author": "Azure Cosmos DB Content Team",
        "source": "https://github.com/AzureCosmosDB/cosmosdb-nosql-copilot",
        "tags": [
            "msft",
            "openai",
            "gpt",
            "cosmosdb",
            "bicep",
            "ai",
            "dotnetCsharp",
            "managedidentity",
            "appservice",
            "semantickernel",
            "blazor"
        ],
        "id": "ca134ac5-31fc-4221-851b-a3c2f2bf98d9",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Cosmos DB",
            "Azure OpenAI Service",
            "Azure App Service"
        ],
        "sampleQueries": [
            "How can I integrate Azure Cosmos DB with Azure OpenAI for a Copilot app?",
            "What are the steps to create a Copilot application using Azure App Service and OpenAI?",
            "Can I use managed identities and Blazor in an AI-powered Copilot app hosted on Azure?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "C#",
            "NoSQL",
            "Blazor"
        ],
        "keyFeatures": [
            "Build a multi-tenant, multi-user, Generative-AI RAG Pattern application",
            "Use Azure Cosmos DB for NoSQL with vector database capabilities",
            "Generate completions and embeddings using Azure OpenAI Service",
            "Manage a context window (chat history) for natural conversational interactions",
            "Manage per-request token consumption and payload sizes for Azure OpenAI Service requests",
            "Build a semantic cache using Azure Cosmos DB for NoSQL vector search for improved performance and cost",
            "Use the Semantic Kernel SDK for completion and embeddings generation",
            "Implement RAG Pattern using vector search in Azure Cosmos DB for NoSQL on custom data",
            "Deploy on Azure App Service"
        ]
    },
    {
        "title": "Serverless Azure OpenAI Quick Start with LlamaIndex (Python)",
        "description": "This sample shows how to quickly get started with LlamaIndex.ai on Azure. The application is hosted on Azure Container Apps. You can use it as a starting point for building more complex RAG applications.",
        "author": "Marlene Mhangami",
        "source": "https://github.com/Azure-Samples/llama-index-python",
        "tags": [
            "msft",
            "openai",
            "gpt",
            "bicep",
            "ai",
            "python",
            "managedidentity",
            "aca",
            "ai",
            "rag",
            "aicollection"
        ],
        "id": "0c327019-e4d4-49bf-b310-36e1e0914995",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Container Apps",
            "Azure OpenAI"
        ],
        "sampleQueries": [
            "How do I set up a serverless OpenAI application using Azure Container Apps?",
            "What is LlamaIndex.ai and how can I integrate it with Azure for RAG applications?",
            "Can you give me an example of how to build a complex RAG application on Azure with Python?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Python",
            "JavaScript",
            "Bicep"
        ],
        "keyFeatures": [
            "Quick start with LlamaIndex on Azure",
            "Hosted on Azure Container Apps",
            "Supports building more complex RAG applications",
            "Python backend using FastAPI",
            "Javascript frontend using Next.js",
            "Ingests various data sources including local files, websites, and databases",
            "Supports PDF, text, CSV, Markdown, Word, and HTML files",
            "Utilizes Azure OpenAI for answering questions",
            "Uses gpt-35-turbo model and embeddings",
            "Available options for GitHub Codespaces, VS Code Dev Containers, and local environment setup",
            "Provisions and deploys Azure resources using Azure Developer CLI",
            "CI/CD pipeline configuration",
            "Personalize the app with custom data and appearance"
        ]
    },
    {
        "title": "Serverless Azure OpenAI Quick Start with LlamaIndex (JavaScript)",
        "description": "This sample shows how to quickly get started with LlamaIndex.ai on Azure. The application is hosted on Azure Container Apps. You can use it as a starting point for building more complex RAG applications.",
        "author": "Wassim Chegham",
        "source": "https://github.com/Azure-Samples/llama-index-javascript",
        "tags": [
            "msft",
            "openai",
            "bicep",
            "javascript",
            "nodejs",
            "ai",
            "aca",
            "rag",
            "aicollection"
        ],
        "id": "444b9fdf-aeac-43d8-9c10-73eea3b44c9c",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Container Apps",
            "Azure OpenAI"
        ],
        "sampleQueries": [
            "How can I set up a serverless Azure application with LlamaIndex and OpenAI?",
            "Can I build a RAG application with LlamaIndex.ai hosted on Azure Container Apps?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "Javascript",
            "Nodejs"
        ],
        "keyFeatures": [
            "Serverless deployment on Azure Container Apps",
            "Integration with Azure OpenAI for question-answering",
            "Uses gpt-35-turbo model and embeddings",
            "Supports multiple data sources including local files, websites, and databases",
            "Ingests PDF, text, CSV, Markdown, Word and HTML files",
            "Full-stack Next.js application",
            "Quickstart options with GitHub Codespaces and VS Code Dev Containers",
            "Provisioning and deploying with Azure Developer CLI",
            "Built-in Managed Identity or Key Vault for credential management",
            "GitHub Action tool for security scanning",
            "Option to configure CI/CD pipeline",
            "Region-specific deployment recommendations",
            "Cost-effective resource usage with Azure pricing calculator"
        ]
    },
    {
        "title": "NLP to SQL In-A-Box",
        "description": "NLP-SQL-in-a-Box is part of Microsoft's AI-in-a-Box framework, designed to simplify the deployment of AI and ML solutions. This project enables users to interact with SQL databases using natural language and speech, leveraging Azure OpenAI, Semantic Kernel, and Azure AI Speech Service to translate spoken queries into SQL statements, execute them, and deliver results audibly, ensuring an intuitive and user-friendly experience.",
        "author": "AI-in-a-Box Team",
        "source": "https://github.com/Azure-Samples/nlp-sql-in-a-box",
        "tags": [
            "msft",
            "openai",
            "gpt",
            "bicep",
            "ai",
            "python",
            "azuresql",
            "speechservice",
            "azureai",
            "managedidentity",
            "semantickernel",
            "new"
        ],
        "id": "c1ea7827-0596-4556-a9be-01b772fd94a7",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure OpenAI Service",
            "Azure AI Speech Service",
            "Azure SQL Database"
        ],
        "sampleQueries": [
            "How can I use my voice to query SQL databases using Azure's AI services?",
            "Is there a way to implement natural language processing to interact with Azure SQL databases?",
            "What is the process to set up Azure AI Speech Service for translating spoken queries into SQL?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            "Python"
        ],
        "keyFeatures": [
            "Translate natural language queries into SQL",
            "Interact with SQL databases using speech",
            "Leverage Azure OpenAI and Semantic Kernel",
            "Use Azure AI Speech Service to translate spoken queries",
            "Execute SQL statements and deliver results audibly",
            "User-friendly and intuitive experience",
            "Python application",
            "Deployment templates for all required resources",
            "Security best practices (RBAC roles, Active Directory authentication)",
            "Adaptability for more complex queries and additional use cases",
            "No API keys access for Speech and OpenAI services",
            "Resources deployed with no default public access"
        ]
    },
    {
        "title": "RAG using Kernel Memory on Azure",
        "description": "Kernel Memory (KM) is a multi-modal AI Service specialized in the efficient indexing of datasets through custom continuous data hybrid pipelines, with support for Retrieval Augmented Generation (RAG), synthetic memory, prompt engineering, and custom semantic memory processing.",
        "author": "Kernel Memory Team",
        "source": "https://github.com/microsoft/kernel-memory",
        "tags": [
            "msft",
            "openai",
            "aca",
            "ai",
            "aisearch",
            "azureai",
            "bicep",
            "managedidentity",
            "blobstorage",
            "dotnetCsharp",
            "gpt",
            "agw",
            "semantickernel",
            "azurestorage",
            "appinsights",
            "vnets",
            "kernelmemory",
            "promptengineering",
            "new",
            "rag"
        ],
        "id": "eb384955-4583-41de-a87f-42bf6bfb1439",
        "deploymentOptions": [
            "azcli",
            "bicep"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure AI Search",
            "Azure App Service",
            "Azure Blob Storage",
            "Azure Cosmos DB",
            "Azure Cognitive Services",
            "Azure OpenAI",
            "Azure Queue Storage"
        ],
        "sampleQueries": [
            "How do I use Kernel Memory for efficient indexing of datasets on Azure?",
            "Can I create custom continuous data hybrid pipelines with Azure's Kernel Memory?",
            "What are the steps to implement Retrieval Augmented Generation with Kernel Memory in an Azure environment?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Bicep",
            ".NET",
            "C#"
        ],
        "keyFeatures": [
            "Multi-modal AI Service",
            "Efficient indexing of datasets",
            "Custom continuous data hybrid pipelines",
            "Retrieval Augmented Generation (RAG)",
            "Synthetic memory",
            "Prompt engineering",
            "Custom semantic memory processing",
            "Available as a Web Service, Docker container, Plugin, and .NET library",
            "Natural Language querying with citations and links",
            "Integration with Semantic Kernel, Microsoft Copilot, and ChatGPT",
            "Asynchronous and scalable service",
            "Serverless mode",
            "Web API with OpenAPI",
            "Support for various file types and formats",
            "Cosine similarity, Hybrid search, and Filters",
            "Document storage with Azure Blobs, AWS S3, MongoDB Atlas, etc.",
            "Large document ingestion with async processing",
            "Custom data pipelines and handlers",
            "LLM integration with Azure OpenAI, OpenAI, etc.",
            "Security filters",
            "Summarization",
            "OCR via Azure Document Intelligence",
            "Concurrent write to multiple vector DBs",
            "Cloud deployment with Azure",
            "Extensive customization options",
            "Examples and tools for various integrations"
        ]
    },
    {
        "title": "Serverless Azure OpenAI Assistant Quick Start with Function Calling",
        "description": "Allows you to create AI assistants tailored to your needs via custom instructions and tools like code interpreter and custom functions.",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure-Samples/azure-openai-assistant-javascript",
        "tags": [
            "javascript",
            "gpt",
            "swa",
            "functions",
            "openai",
            "managedidentity",
            "openai",
            "aicollection",
            "msft",
            "new"
        ],
        "id": "9691c16c-500a-40c2-9b55-994fff837a35",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure Static Web Apps",
            "Azure Functions",
            "Azure Managed Identity"
        ],
        "sampleQueries": [
            "How can I build a serverless OpenAI assistant using Azure?",
            "What is the process to set up custom AI functions with Azure's serverless capabilities?",
            "Can I implement a code interpreter in my Azure OpenAI assistant?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Javascript",
            "OpenAI"
        ],
        "keyFeatures": [
            "Create AI assistants tailored to your needs via custom instructions and tools",
            "Advanced tools like code interpreter and custom functions",
            "Retrieve financial information, such as stock values",
            "Answer questions",
            "Send emails",
            "Run custom functions",
            "Hosted on Azure Static Web Apps and Azure Functions",
            "Uses OpenAI JavaScript SDK",
            "Integration with GitHub Codespaces and VS Code Dev Containers",
            "Supports gpt-35-turbo model",
            "Support for local development",
            "Guidance on provisioning resources and CI/CD pipeline setup",
            "Security recommendations with Managed Identity or Key Vault",
            "Pricing information and recommendations"
        ]
    },
    {
        "title": "Chat + Vision using Azure OpenAI",
        "description": "A demonstration of chatting with uploaded images using OpenAI vision models like gpt-4o.",
        "author": "Azure Content Team",
        "source": "https://github.com/Azure-Samples/openai-chat-vision-quickstart",
        "tags": [
            "python",
            "managedidentity",
            "aca",
            "azureai",
            "aicollection",
            "msft",
            "new"
        ],
        "id": "0f6f3413-2d11-49fd-87a9-a87121f3a70a",
        "deploymentOptions": [
            "azcli"
        ],
        "deploymentConfig": {},
        "products": [
            "Azure OpenAI",
            "Azure Container Apps",
            "Azure Developer CLI",
            "Azure Container Registry",
            "Azure Log Analytics"
        ],
        "sampleQueries": [
            "How do I chat with uploaded images using Azure OpenAI vision models like gpt-4o?",
            "What's the best way to implement a Chat + Vision feature with Azure AI?",
            "Can I integrate Azure Managed Identity with a Python application using Azure AI for image-related conversations?"
        ],
        "sourceType": "Azd",
        "tech": [
            "Python",
            "Quart",
            "OpenAI"
        ],
        "keyFeatures": [
            "Python app uses Azure OpenAI to generate responses",
            "Supports user messages and image uploads",
            "Deploys to Azure Container Apps",
            "Uses managed identity for authentication",
            "Deploys a GPT-4o model with Global SKU",
            "Basic HTML/JS frontend",
            "Streams responses using JSON Lines over ReadableStream",
            "Bicep files for provisioning Azure resources",
            "Support for using local LLMs during development",
            "Azure Developer CLI for provisioning and deployment",
            "GitHub Codespaces and VS Code Dev Containers support",
            "Azure account setup and resource permissions required",
            "Continuous deployment with GitHub Actions",
            "Local development server setup included",
            "Security measures and cost considerations provided"
        ]
    }
]